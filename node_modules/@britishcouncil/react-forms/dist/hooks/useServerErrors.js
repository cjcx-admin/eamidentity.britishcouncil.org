import {
    useEffect,
    useMemo
} from 'react';
import {
    getIn,
    setIn
} from 'formik';
import {
    useGeneralServerErrors
} from '..';
import {
    generateObjectPaths
} from '@britishcouncil/common-core';
export function useServerErrors(formik, serverValidationErrors) {
    const generalErrors = useGeneralServerErrors(formik, serverValidationErrors);
    const {
        initialValues,
        setErrors
    } = formik;
    const fields = useMemo(() => new Set(generateObjectPaths(initialValues)), [initialValues]);
    useEffect(() => {
        if (!serverValidationErrors) {
            return;
        }
        let errors = {};
        for (const {
                propertyName,
                message
            } of serverValidationErrors) {
            if (!propertyName || !fields.has(propertyName)) {
                continue;
            }
            const concatenated = getIn(errors, propertyName) || '';
            errors = setIn(errors, propertyName, `${concatenated}\n${message}`.trim());
        }
        if (setErrors) {
            setErrors(errors);
        }
    }, [serverValidationErrors, fields, setErrors]);
    return generalErrors;
}