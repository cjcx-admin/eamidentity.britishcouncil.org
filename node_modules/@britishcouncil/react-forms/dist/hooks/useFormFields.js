import {
    useMemo,
    useCallback
} from 'react';
import {
    useCache
} from '@britishcouncil/react-common';
import {
    getFieldName,
    isPrimitivesArray,
    isPrimitive
} from '../utils';
export function useFormFields(formik) {
    const {
        errors,
        touched,
        setFieldTouched,
        setFieldValue,
        values
    } = formik;
    const changeHandlers = useCache(useCallback(({
        key
    }) => value => {
        setFieldValue(key, value);
    }, [setFieldValue]));
    const blurHandlers = useCache(useCallback(({
        key
    }) => () => {
        setFieldTouched(key, true);
    }, [setFieldTouched]));
    const fields = useMemo(() => {
        const getProps = (name, value, error, touched) => ({
            name,
            value,
            error,
            touched: Boolean(touched),
            onBlur: blurHandlers.getOrCreate(name),
            onChange: changeHandlers.getOrCreate(name),
        });

        function mapToFields(baseName, valuesObj = {}, errorsObj = {}, touchedObj = {}) {
            const isArray = Array.isArray(valuesObj);
            const result = isArray ? [] : {};
            for (const key of Object.keys(valuesObj)) {
                const name = getFieldName(baseName, key, isArray);
                const value = valuesObj[key];
                const errors = errorsObj[key];
                const touched = touchedObj[key];
                result[key] = !isPrimitive(value) && !isPrimitivesArray(value) ?
                    mapToFields(name, value, errors, touched) :
                    getProps(name, value, errors, touched);
            }
            return result;
        }
        return mapToFields('', values, errors, touched);
    }, [values, errors, touched, blurHandlers, changeHandlers]);
    return fields;
}