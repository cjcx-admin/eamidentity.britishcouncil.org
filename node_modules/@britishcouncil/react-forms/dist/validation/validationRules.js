import * as yup from 'yup';
import {
    DateTime
} from 'luxon';
import valid from 'card-validator';
import {
    estimatePasswordCompliance
} from './passwordCompliance';
export const requiredMessage = 'This field is required.';
/* Latin + unicode base range*/
export const unicodeChars = {
    regex: /^([A-Za-z.'\-\u00C0-\u017e\s']*)$/g,
    message: 'Field should contain only latin characters.',
};
export const unicodeCharsWithParentheses = {
    regex: /^([A-Za-z.'\-\u00C0-\u017e\s'\(\)]*)$/g,
    message: 'Field should contain only latin characters and parentheses.',
};
export const unicodeWithKoreanAndChineseChars = {
    regex: /^([a-zA-Z\u00C0-\u017e\u4e00-\u9FFF\uAC00-\uD7A3\s]*)$/g,
    message: 'Field contains not supported characters set',
};
export const idNumberRegex = {
    regex: /^([A-Za-z0-9-]*)$/g,
    message: "Field has to match specific format (allowed are latin letters, digits, and hyphen '-')",
};
export const latinAlfanumeric = {
    regex: /^([A-Za-z0-9\s]*)$/g,
    message: 'Field should contain only latin characters and digits.',
};
export const documentNumberProhibitedKeyWords = {
    regex: /^(?:\s*[\w\W]*\s*(?:travel|driving|driver|licence|license|national|passport|biometric)\s*[\w\W]*\s*)+$/i,
    message: "This doesn't look like valid ID Document Number.",
};
export const windows1252 = {
    regex: new RegExp('^[\\s"#$%&\'()*+,-.\\/0123456789:;<=>?!@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĴĵĶķĹĺĻļĽľŁłŃńŅņŇňŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžƀƉƑƒƗƚƟƠơƫƮƯưƶǀǃǍǎǏǐǑǒǓǔǕǖǗǘǙǚǛǜǞǟǤǥǦǧǨǩǪǫǬǭǰɡʹʺʼ˄ˆˈˉˊˋˍ˚˜̧̱̲̀́̂̃̄̅̈̊̎;ΓΘΣΦΩαβδεμπστφһ։٪‐‑–—‗‘’‚“”„†‡•․…‰′‵‹›⁄⁰⁴⁵⁶⁷⁸ⁿ₀₁₂₃₄₅₆₇₈₉₡₤₧€ℂℇℊℋℌℍℎℐℑℒℓℕ℘ℙℚℛℜℝ™ℤℨKÅℬℭ℮ℯℰℱℳℴ∅−∓∕∖∗∘∙√∞∣∩∶∼≈≡≤≥≪≫⋅⌂⌃⌐⌠⌡〈〉─│┌┐└┘├┤┬┴┼═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬▀▄█▌▐░▒▓■☼❘〈〉《》〚〛・！＂＃＄％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝～]*$'),
    message: 'Field contains not supported characters set',
};
export const requiredStringI18n = (requiredMessage) => yup.string().required(requiredMessage);
export const requiredString = requiredStringI18n(requiredMessage);
export const requiredNumberI18n = (requiredMessage) => yup.number().required(requiredMessage);
export const requiredNumber = requiredNumberI18n(requiredMessage);
// export const unicodeString = yup
//   .string()
//   .matches(unicodeChars.regex, { message: unicodeChars.message, excludeEmptyString: true });
export const addressFieldI18n = (maxLength) => yup.string().max(100, maxLength);
export const addressField = addressFieldI18n('Max length is 100');
export const firstNameI18n = (i18n) => yup
    .string()
    .required(i18n.required)
    .max(50, i18n.maxLength)
    .matches(unicodeCharsWithParentheses.regex, {
        message: i18n.onlyLatin,
        excludeEmptyString: true
    });
export const firstName = firstNameI18n({
    required: requiredMessage,
    maxLength: 'Max length is 50',
    onlyLatin: unicodeCharsWithParentheses.message,
});
export const lastNameI18n = (i18n) => yup
    .string()
    .required(i18n.requiredNoSurmane)
    .max(50, i18n.maxLength)
    .matches(unicodeCharsWithParentheses.regex, {
        message: i18n.onlyLatin,
        excludeEmptyString: true
    });
export const lastName = lastNameI18n({
    requiredNoSurmane: `${requiredMessage} If you do not have a surname, please put a hyphen ('-') in this field.`,
    maxLength: 'Max length is 50',
    onlyLatin: unicodeCharsWithParentheses.message,
});
const MIN_DATE_OF_BIRTH = '1900-01-01';
const MAX_DATE_AVAILABLE = '9999-12-31';
const dateOutOfRangeMessage = 'Are you sure you were born that year?';
export const dateOfBirthI18n = (i18n) => yup
    .date()
    .required(i18n.required)
    .transform((value, rawValue) => {
        const dateValue = DateTime.fromISO(rawValue).isValid ? rawValue : undefined;
        return dateValue ? DateTime.fromISO(dateValue).toJSDate() : value;
    })
    .typeError(i18n.required)
    .min(MIN_DATE_OF_BIRTH, i18n.dateOutOfRange)
    .max(DateTime.local().toJSDate(), i18n.dateOutOfRange);
export const dateOfBirth = dateOfBirthI18n({
    required: requiredMessage,
    dateOutOfRange: dateOutOfRangeMessage
});
export const emailI18n = (i18n) => yup.string().email(i18n.validEmail).required(i18n.required).max(60, i18n.maxLength);
export const email = emailI18n({
    validEmail: 'Please specify a valid email address. This field needs to be a valid email.',
    required: requiredMessage,
    maxLength: 'Max length is 60',
});
export const confirmEmailI18n = (i18n) => yup
    .string()
    .required(i18n.required)
    .oneOf([yup.ref('email')], i18n.mismatch);
export const confirmEmail = confirmEmailI18n({
    required: requiredMessage,
    mismatch: 'This field needs to match the Email field above exactly.',
});
export const password = yup.string().required(requiredMessage).max(100, 'Max length is 100');
export const newPasswordI18n = (i18n) => yup
    .string()
    .required(i18n.required)
    .max(100, i18n.maxLength)
    .test('passwordCompliant', i18n.weakPassword, (password) => estimatePasswordCompliance(password).isCompliant);
export const newPassword = newPasswordI18n({
    required: requiredMessage,
    maxLength: 'Max length is 100',
    weakPassword: 'Your password is too weak.',
});
export const enumToWhitelist = (enumObject, except) => Object.values(enumObject).filter((val) => typeof val === 'number' && val !== except);
export const enumToWhitelistString = (enumObject, except) => Object.values(enumObject).filter((val) => typeof val === 'string' && val !== except);
export const idNumberI18n = (i18n) => yup
    .string()
    .required(i18n.required)
    .matches(idNumberRegex.regex, {
        message: i18n.regexMismatch,
        excludeEmptyString: true,
    })
    .max(20, i18n.maxLength);
export const idNumber = idNumberI18n({
    required: requiredMessage,
    regexMismatch: idNumberRegex.message,
    maxLength: 'Document number can be at most 20 characters long.',
});
export const expiryDate = yup
    .date()
    .nullable()
    .transform((value, rawValue) => {
        if (!rawValue) {
            return null;
        }
        const dateValue = DateTime.fromISO(rawValue).isValid ? rawValue : undefined;
        return dateValue ? DateTime.fromISO(dateValue).toJSDate() : value;
    })
    .max(MAX_DATE_AVAILABLE, 'Date is out of limits');
export const acceptTermsAndConditionsI18n = (requiredMessage) => yup.boolean().required().oneOf([true], requiredMessage);
export const acceptTermsAndConditions = acceptTermsAndConditionsI18n(requiredMessage);
const validMobileNumberExpr = /(^$)|(^\+?[0-9, ]+$)/;
export const mobileNumberI18n = (i18n) => yup.string().required(i18n.required).matches(validMobileNumberExpr, i18n.validNumber).max(20, i18n.maxLength);
export const mobileNumber = mobileNumberI18n({
    required: requiredMessage,
    validNumber: 'Please specify a valid mobile number.',
    maxLength: 'Mobile number can be at most 20 characters long.',
});
export const creditCard = yup
    .string()
    .required(requiredMessage)
    .test('creditCardValid', 'Credit Card number is invalid', (value) => valid.number(value).isValid);