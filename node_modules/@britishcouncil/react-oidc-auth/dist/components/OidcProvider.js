import React, {
    useCallback,
    useEffect
} from 'react';
import {
    AuthProvider,
    useAuth
} from 'react-oidc-context';
import {
    userChanged
} from '../store';
/**
 * Provides the AuthContext to its child components.
 */
export const OidcProvider = ({
    children,
    store,
    removeExpiredUser = true,
    ...props
}) => {
    return (React.createElement(React.Fragment, null,
        React.createElement(AuthProvider, { ...props
            },
            React.createElement(EventBinder, {
                store: store,
                removeExpiredUser: removeExpiredUser
            }, children))));
};
const EventBinder = ({
    children,
    store,
    removeExpiredUser
}) => {
    const {
        removeUser,
        user,
        events,
        isAuthenticated,
        isLoading
    } = useAuth();
    useEffect(() => {
        if (store) {
            store.dispatch(userChanged({
                user,
                isAuthenticated,
                isLoading
            }));
        }
    }, [isAuthenticated, isLoading, store, user]);
    const onAccessTokenExpired = useCallback(() => {
        if (removeExpiredUser) {
            removeUser();
        }
    }, [removeExpiredUser, removeUser]);
    useEffect(() => {
        events.addAccessTokenExpired(onAccessTokenExpired);
        return () => {
            events.removeAccessTokenExpired(onAccessTokenExpired);
        };
    }, [events, onAccessTokenExpired]);
    return React.createElement(React.Fragment, null, children);
};