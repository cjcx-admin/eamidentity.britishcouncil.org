import {
    useRef,
    useMemo,
    useEffect
} from 'react';
export function useCache(factory) {
    const cacheMap = useRef(null);
    if (cacheMap.current === null)
        cacheMap.current = new Map();
    // store the factory function in ref to never recalculate the hook result
    const factoryFn = useRef(factory);
    factoryFn.current = factory;
    // clear the cache when factory function changes
    useEffect(() => () => {
        cacheMap.current.clear();
    }, [factory]);
    return useMemo(() => ({
        getOrCreate: (key) => {
            const cachedValue = cacheMap.current.get(key);
            if (cachedValue !== undefined)
                return cachedValue;
            const value = factoryFn.current({
                key
            });
            cacheMap.current.set(key, value);
            return value;
        },
        clear: () => cacheMap.current.clear(),
        remove: (key) => cacheMap.current.delete(key),
    }), []);
}