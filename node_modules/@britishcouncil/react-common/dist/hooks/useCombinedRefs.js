import {
    useEffect,
    useState,
    useCallback
} from 'react';
export function useCombinedRefs(...refs) {
    const [instance, setInstance] = useState(null);
    useEffect(() => {
        for (const ref of refs) {
            if (!ref)
                continue;
            if (typeof ref === 'function') {
                ref(instance);
            } else {
                ref.current = instance;
            }
        }
    }, [refs, instance]);
    return useCallback(instance => {
        setInstance(instance);
    }, []);
}