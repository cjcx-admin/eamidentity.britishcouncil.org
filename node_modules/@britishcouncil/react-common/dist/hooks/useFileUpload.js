import {
    useCallback,
    useMemo,
    useState
} from 'react';
import {
    removeElementById
} from '../core/helpers/DOMmanipulation';
export function useFileUpload(acceptedTypes, inputElementId) {
    const [selectedFile, setSelectedFile] = useState();
    const inputEl = useMemo(() => {
        const element = document.createElement('input');
        element.type = 'file';
        element.addEventListener('change', () => {
            if (element && element.files && element.files.length > 0) {
                setSelectedFile(element.files[0]);
            }
        });
        if (!!acceptedTypes) {
            element.accept = acceptedTypes;
        }
        if (!!inputElementId) {
            element.id = inputElementId;
            removeElementById(inputElementId);
            document.body.appendChild(element);
        }
        return element;
    }, [acceptedTypes]);
    const openFileDialog = useCallback(() => {
        inputEl.click();
    }, [inputEl]);
    const isFileSelected = useMemo(() => Boolean(selectedFile), [selectedFile]);
    const reset = useCallback(() => {
        inputEl.value = '';
        setSelectedFile(undefined);
    }, [inputEl.value]);
    return {
        openFileDialog,
        selectedFile,
        isFileSelected,
        reset,
        setSelectedFile
    };
}