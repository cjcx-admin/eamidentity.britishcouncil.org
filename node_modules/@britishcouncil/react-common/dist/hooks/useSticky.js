import {
    useCallback,
    useEffect,
    useState
} from 'react';
/**
 * Determine whether selected element is 'sticky' or not.
 */
export const useSticky = (ref) => {
    const [isSticky, setSticky] = useState(false);
    const handleScroll = useCallback(() => {
        if (ref && ref.current) {
            const rect = ref.current.getBoundingClientRect();
            setSticky(rect.top <= 0 && rect.y >= 0);
        }
    }, [ref]);
    useEffect(() => {
        window.addEventListener('scroll', handleScroll);
        return () => {
            window.removeEventListener('scroll', () => handleScroll);
        };
    }, [handleScroll]);
    return isSticky;
};
/**
 * You can use your own CSS to style sticky elements. Basic usage and styling:
 *
 * const isSticky = useSticky(ref);
 *
 * <StickyComponent className={cn('sticky', { floats: isSticky })} ref={ref}>
 *  <>Content here...</>
 * </StickyComponent>
 *
 * const StickyComponent = styled.div`
 *    &.sticky {
        position: sticky;
        top: 0;
        &.floats {
          box-shadow: 0 5px 5px -5px rgba(0, 0, 0, 0.25);
        }
      }
 * `
 */