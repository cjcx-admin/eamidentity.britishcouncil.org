import {
    useCallback,
    useEffect,
    useRef
} from 'react';

function abortLoading(fileReader) {
    if (fileReader && fileReader.readyState === FileReader.LOADING) {
        fileReader.abort();
    }
}
export function useFileReader(file) {
    const {
        current: fileReaderRef
    } = useRef(new FileReader());
    useEffect(() => {
        return () => {
            abortLoading(fileReaderRef);
        };
    }, [file, fileReaderRef]);
    const readAsDataURL = useCallback(() => new Promise((resolve, reject) => {
        fileReaderRef.onload = (event) => event && event.target && event.target.result && resolve(event.target.result);
        fileReaderRef.onerror = (event) => event && event.target && event.target.error && reject(event.target.error);
        if (!file) {
            reject('File is not selected');
        } else {
            fileReaderRef.readAsDataURL(file);
        }
    }), [file, fileReaderRef]);
    return {
        readAsDataURL,
    };
}