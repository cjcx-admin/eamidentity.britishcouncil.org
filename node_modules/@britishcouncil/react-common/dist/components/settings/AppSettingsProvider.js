import React, {
    useEffect,
    useState
} from 'react';
import {
    AppSettingsStatus
} from './AppSettingsContext';
const defaultLoader = React.createElement("div", null, "Loading...");
const defaultError = React.createElement("div", null, "Oooops...");
/**
 * Provides the AppSettingsContext to its child components.
 */
export const AppSettingsProvider = ({
    Context,
    defaultAppSettings,
    appSettingsSource = '/appsettings.json',
    isAppSettingsValid,
    loader = defaultLoader,
    error = defaultError,
    children,
}) => {
    const [appSettingsState, setAppSettings] = useState({
        status: AppSettingsStatus.loading,
        settings: defaultAppSettings,
    });
    useEffect(() => {
        (typeof appSettingsSource === 'function' ? appSettingsSource() : loadAppSettings(appSettingsSource))
        .then((val) => {
                const settings = {
                    settings: !isAppSettingsValid || isAppSettingsValid(val) ? val : defaultAppSettings,
                    status: AppSettingsStatus.loaded,
                };
                setAppSettings(settings);
            })
            .catch((e) => {
                setAppSettings({
                    settings: defaultAppSettings,
                    status: AppSettingsStatus.error,
                });
            });
    }, [appSettingsSource, defaultAppSettings, isAppSettingsValid]);
    return (React.createElement(Context.Provider, {
            value: appSettingsState.settings
        },
        appSettingsState.status === 'loading' && loader,
        appSettingsState.status === 'error' && error,
        appSettingsState.status === 'loaded' && children));
};
const loadAppSettings = async (url) => {
    const response = await fetch(url);
    const json = await response.json();
    return json;
};