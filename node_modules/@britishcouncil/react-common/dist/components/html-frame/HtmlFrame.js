import React, {
    useRef,
    useEffect,
    useState,
    useCallback
} from 'react';

function executeOnIframeDocument(iframeRef, callback) {
    if (!iframeRef.current)
        return;
    const iframe = iframeRef.current;
    const doc = iframe.contentWindow ? .document;
    if (!doc)
        return;
    callback(doc);
}
export function HtmlFrame({
    content,
    resizeToFit,
    title,
    height,
    ...restOfProps
}) {
    const iframeRef = useRef(null);
    const [innerHeight, setInnerHeight] = useState();
    const updateHeight = useCallback(() => {
        if (resizeToFit) {
            executeOnIframeDocument(iframeRef, (doc) => {
                setInnerHeight(doc.body.scrollHeight + 5);
            });
        } else {
            setInnerHeight(undefined);
        }
    }, [resizeToFit]);
    useEffect(() => {
        if (content) {
            executeOnIframeDocument(iframeRef, (doc) => {
                doc.open();
                if (doc.body) {
                    doc.body.innerHTML = '';
                }
                doc.write(content);
                doc.body.style.margin = '0';
                doc.close();
                updateHeight();
            });
        }
    }, [content, updateHeight]);
    useEffect(() => {
        if (iframeRef ? .current ? .contentDocument) {
            iframeRef.current.contentDocument.body.onload = updateHeight;
        }
    }, [iframeRef ? .current ? .contentDocument ? .body, updateHeight]);
    return (React.createElement("iframe", {
        ref: iframeRef,
        title: title,
        height: innerHeight !== undefined ? innerHeight : height,
        ...restOfProps
    }));
}