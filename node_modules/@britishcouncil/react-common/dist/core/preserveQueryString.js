import {
    parsePath
} from 'history';
import queryString from 'query-string';

function preserveQueryParameters(history, preserve, location) {
    const currentQuery = queryString.parse(history.location.search);
    if (currentQuery) {
        const preservedQuery = {};
        for (let p of preserve) {
            const v = currentQuery[p];
            if (v) {
                preservedQuery[p] = v;
            }
        }
        if (location.search) {
            Object.assign(preservedQuery, queryString.parse(location.search));
        }
        location.search = queryString.stringify(preservedQuery);
    }
    return location;
}

function createLocationDescriptorObject(location, state) {
    return typeof location === 'string' ? { ...parsePath(location),
        state
    } : location;
}
/**
 * It's a history creator that enables store-based history to persist chosen query parameters
 * With this, if user opens a website with `?organisation=XXX` parameter, this parameter will persist in URL
 * even when jumping between pages (within the application of course).
 * You need to specify which parameters should be sticky
 *
 * @example How to use it in your app:
 * ```
 * import { createBrowserHistory } from 'history';
 * const queryParams = ['organisation', 'utm_source', 'utm_medium', 'utm_campaign'];
 *
 * export const history = createPreserveQueryHistory(
 *   createBrowserHistory,
 *   queryParams
 * )();
 * ```
 */
export function createPreserveQueryHistory(createHistory, queryParameters) {
    return (options) => {
        const history = createHistory(options);
        const oldPush = history.push,
            oldReplace = history.replace;
        history.push = (path, state) => oldPush.apply(history, [
            preserveQueryParameters(history, queryParameters, createLocationDescriptorObject(path, state)),
        ]);
        history.replace = (path, state) => oldReplace.apply(history, [
            preserveQueryParameters(history, queryParameters, createLocationDescriptorObject(path, state)),
        ]);
        return history;
    };
}