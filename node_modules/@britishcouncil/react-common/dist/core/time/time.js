// tslint:disable: no-bitwise
// tslint:disable: variable-name
import {
    DAY,
    HOUR
} from './constants';
import {
    mod,
    pad
} from './utils';
export class Time {
    static fromDate(date) {
        if (date === undefined) {
            return undefined;
        }
        return new Time(date.getHours(), date.getMinutes());
    }
    static fromString(time) {
        if (time === undefined) {
            return undefined;
        }
        time = time || '';
        const [hours, minutes] = time.split(':').map((s) => +s);
        return new Time(hours, minutes);
    }
    _raw;
    _normalized;
    constructor(hours = 0, minutes = 0) {
        this._raw = {
            hours,
            minutes
        };
        this.normalize();
    }
    get hours() {
        return this._normalized.hours;
    }
    get minutes() {
        return this._normalized.minutes;
    }
    get rawHours() {
        return this._raw.hours;
    }
    get rawMinutes() {
        return this._raw.minutes;
    }
    addHours(hours) {
        this._raw.hours += hours;
        this.normalize();
        return this;
    }
    addMinutes(minutes) {
        this._raw.minutes += minutes;
        this.normalize();
        return this;
    }
    clone() {
        return new Time(this._raw.hours, this._raw.minutes);
    }
    diff(otherTime) {
        return this.valueOf() - otherTime.valueOf();
    }
    equals(otherTime) {
        return this.valueOf() === otherTime.valueOf();
    }
    getMinutesToNextHour() {
        return HOUR - this._normalized.minutes;
    }
    isValid() {
        return !isNaN(this._raw.hours) && !isNaN(this._raw.minutes);
    }
    setHours(hours) {
        this._raw.hours = hours;
        this.normalize();
        return this;
    }
    setMinutes(minutes) {
        this._raw.minutes = minutes;
        this.normalize();
        return this;
    }
    toJSON() {
        return this.toString();
    }
    toString(raw) {
        const source = raw ? this._raw : this._normalized;
        return [pad(source.hours), pad(source.minutes)].join(':');
    }
    valueOf() {
        return this._raw.hours * HOUR + this._raw.minutes;
    }
    normalize() {
        let {
            hours,
            minutes
        } = this._raw;
        if (!this.isValid()) {
            this._normalized = {
                hours,
                minutes
            };
            return;
        }
        // truncate decimal part
        minutes |= 0;
        hours |= 0;
        if (minutes >= HOUR || minutes < 0) {
            hours += Math.floor(minutes / HOUR);
            minutes = mod(minutes, HOUR);
        }
        if (hours >= DAY || hours < 0) {
            hours = mod(hours, DAY);
        }
        this._normalized = {
            hours,
            minutes
        };
    }
}