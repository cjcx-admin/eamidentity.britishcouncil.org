import {
    ApiError
} from './models';
const statusCodeRegex = /Request failed with status code (\d{3})/;

function parseCode(statusCode) {
    const code = parseInt(statusCode);
    if (code >= 500)
        return ApiError.ServerError;
    if (code === 401)
        return ApiError.Unauthorized;
    if (code >= 400)
        return ApiError.BadRequest;
    return ApiError.None;
}
export const parseApiError = (payload) => {
    if (!payload) {
        return ApiError.None;
    }
    if (payload === 'Network Error' || payload.message === 'Network Error') {
        return ApiError.NoNetwork;
    }
    const statusCode = payload.code || payload.status || payload.response ? .status;
    if (statusCode) {
        return parseCode(statusCode);
    }
    if (!!payload.message) {
        const match = payload.message.match(statusCodeRegex);
        if (match && match.length > 1) {
            return parseCode(match[1]);
        }
    }
    return ApiError.Unknown;
};
export const extractApiErrorMsg = (payload) => {
    if (!payload) {
        return null;
    }
    const errList = payload.response ? .data ? .errors ? ? payload.response ? .data ? .error;
    if (!errList || errList.length === 0) {
        return null;
    }
    return {
        msg: errList[0] ? .message,
        code: errList[0] ? .code ? ? errList[0] ? .errorCode
    };
};
export const extractApiError = (payload) => {
    return {
        type: parseApiError(payload),
        msg: extractApiErrorMsg(payload) ? .msg,
        code: extractApiErrorMsg(payload) ? .code,
    };
};
export function getErrorCode(apiError) {
    let errType;
    switch (apiError) {
        case ApiError.BadRequest:
            errType = 'request';
            break;
        case ApiError.NoNetwork:
            errType = 'network';
            break;
        case ApiError.ServerError:
            errType = 'server';
            break;
        case ApiError.Unauthorized:
            errType = 'login';
            break;
        case ApiError.Unknown:
            errType = 'unknown';
            break;
        default:
            break;
    }
    return errType;
}