import React, {
    Fragment
} from 'react';
import cn from 'classnames';
import {
    flexRender
} from '@tanstack/react-table';
import {
    InfoRows
} from '../infoRow/InfoRows';
import {
    isRowDisabled
} from '../infoRow/helpers';
import {
    NoResultsRow
} from './NoResultsRow';
import {
    EmptyRow
} from './EmptyRow';
export const TableBody = ({
    table,
    infoRows,
    keepHeight = true,
    NoDataRow,
    showPagination,
}) => {
    const columnsLength = table.getAllColumns().length;
    const {
        pageSize
    } = table.getState().pagination;
    const pageCount = table.getPageCount();
    const {
        rows
    } = table.getRowModel();
    /* Number of empty rows to add when using pagination.
       Thanks to that table keeps the same height on last page, when we can have smaller number of rows. */
    const rowsToAdd = pageCount > 1 ? pageSize - rows.length : 0;
    return (React.createElement(React.Fragment, null, rows.length === 0 ? (React.createElement("tr", null,
        React.createElement("td", {
            colSpan: columnsLength
        }, NoDataRow ? React.createElement(NoDataRow, null) : React.createElement(NoResultsRow, null)))) : ([
        ...rows.map((row) => {
            const info = infoRows ? infoRows(row.original) : [];
            const disableRow = isRowDisabled(info);
            return (React.createElement(Fragment, {
                    key: row.id
                },
                React.createElement("tr", {
                    key: row.id,
                    className: cn({
                        'row-extended': row.getIsExpanded(),
                        'row-disabled': disableRow,
                        'row-selected': row.getIsSelected(),
                    })
                }, row.getVisibleCells().map((cell) => (React.createElement("td", {
                    key: cell.id
                }, flexRender(cell.column.columnDef.cell, cell.getContext()))))),
                React.createElement(InfoRows, {
                    infoData: info,
                    rowData: row.original,
                    colSpan: columnsLength
                })));
        }),
        showPagination && keepHeight ?
        new Array(rowsToAdd).fill(null).map((_, i) => React.createElement(EmptyRow, {
            key: i,
            colSpan: columnsLength
        })) :
        null,
    ])));
};