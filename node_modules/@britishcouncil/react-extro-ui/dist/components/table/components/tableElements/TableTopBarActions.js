import React, {
    useCallback,
    forwardRef,
    useMemo
} from 'react';
import * as S from '../../Table.styles';
import {
    Filter
} from '../../../filter';
export const TableTopBarActions = forwardRef(({
    externalSelectedCount,
    externalHandleSorting,
    externalSortingValue,
    isAllSelected,
    table,
    showCheckbox,
    showToggleAll,
    sortingOptions,
    TableActions,
    toggleAllHandler,
}, ref) => {
    const selected = table.getSelectedRowModel();
    const state = table.getState();
    const handleSorting = useCallback((option) => {
        if (externalHandleSorting) {
            externalHandleSorting(option);
            return;
        }
        const columnToSort = table.getAllColumns().find((c) => c.id === option ? .columnId);
        columnToSort
            ?
            table.setSorting([{
                id: String(option ? .columnId) ? ? '',
                desc: option ? .desc ? ? false
            }]) :
            console.warn(`Cannot sort table. Column selected to sort "${String(option?.columnId)}" is not present in the table.`);
    }, [externalHandleSorting, table]);
    const filterValue = useMemo(() => {
        return sortingOptions ? .find((s) => state.sorting[0] ? .id === s.columnId && state.sorting[0] ? .desc === (s.desc || false)) ? .value;
    }, [sortingOptions, state.sorting]);
    return (React.createElement(React.Fragment, null, showCheckbox || TableActions || sortingOptions ? (React.createElement(S.TopBar, {
            className: "extroui-table-topbar"
        },
        React.createElement(S.Actions, null,
            React.createElement(React.Fragment, null,
                showCheckbox ? React.createElement("div", {
                    ref: ref
                }) : null,
                TableActions && React.createElement(TableActions, { ...selected
                }))),
        React.createElement(S.ShowAll, null,
            (externalSelectedCount || selected.rows.length > 0) && (React.createElement("span", {
                className: "checkbox_selected"
            }, `Selected: ${externalSelectedCount || selected.rows.length}`)),
            showToggleAll && (React.createElement(S.ShowAllButton, {
                    className: "highlightable",
                    onClick: () => {
                        toggleAllHandler && toggleAllHandler();
                    }
                },
                isAllSelected ? 'Unselect' : 'Select',
                " all items in this table"))),
        sortingOptions && (React.createElement(S.Sorting, null,
            React.createElement(Filter, {
                autoFocus: true,
                elements: sortingOptions ? .map((el) => {
                    return {
                        label: el.label,
                        value: el.value
                    };
                }),
                defaultSelectLabel: 'Select...',
                background: "#fff",
                customWidth: "242px;",
                onChangeSingleValue: (value) => {
                    const selectedOption = sortingOptions.find((el) => el.value === value);
                    handleSorting(selectedOption ? ? null);
                },
                type: "singleSelect",
                values: [externalSortingValue ? ? filterValue ? ? '']
            }))))) : null));
});