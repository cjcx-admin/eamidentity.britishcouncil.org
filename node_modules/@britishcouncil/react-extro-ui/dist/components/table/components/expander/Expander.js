import React, {
    useCallback,
    useMemo,
    useRef,
    useEffect,
} from 'react';
import ReactDOM from 'react-dom';
import {
    ExpanderText
} from './ExpanderText';
export const Expander = ({
    children,
    ToggleBtn,
    labels,
    disableExpandButton,
    onToggle,
    cellProps,
    parentProps,
}) => {
    const expanderRef = useRef(null);
    const tdRef = useRef(null);
    const expandedRowRef = useRef(null);
    /* Extra row added to the table to render expanded content within it. */
    const expandedRow = useMemo(() => document.createElement('tr'), []);
    /* Extra rows to add top and bottom space to expanded row */
    const spaceRowTop = useMemo(() => document.createElement('tr'), []);
    const spaceRowBottom = useMemo(() => document.createElement('tr'), []);
    const handleExpand = useCallback((e) => {
        const clickInsideExtraRow = tdRef.current ? .contains(e.target) ? ? false;
        /* Do not close extra row when clicked inside that row */
        if (clickInsideExtraRow)
            return;
        /* Select row (<tr>) of the current cell (<td>) */
        const currentRow = expanderRef.current ? .closest('tr');
        const isRow = currentRow ? .nodeName === 'TR';
        if (!isRow) {
            return console.warn('Cannot expand row. Cannot find parent row (<tr>) of the current cell (<td>).');
        }
        const isExpanded = !cellProps ? .row.getIsExpanded();
        if (isExpanded) {
            expandedRow.className = 'row-extended';
            spaceRowTop.className = 'row-space';
            spaceRowBottom.className = 'row-space';
            /* Add space rows before row with expander and after expanded row */
            currentRow ? .previousElementSibling ? .className !== 'row-space' && currentRow ? .before(spaceRowTop);
            currentRow ? .nextElementSibling ? .className !== 'row-space' && currentRow ? .after(spaceRowBottom);
            /* Add expanded row after row with expander */
            currentRow ? .after(expandedRow);
            expandedRowRef.current = expandedRow;
        } else {
            expandedRow.remove();
            spaceRowTop.remove();
            spaceRowBottom.remove();
        }
        onToggle && onToggle(isExpanded);
        cellProps ? .row.toggleExpanded();
    }, [cellProps ? .row, onToggle, expandedRow, spaceRowTop, spaceRowBottom]);
    useEffect(() => {
        return () => {
            if (cellProps ? .row.getIsExpanded()) {
                cellProps.row.toggleExpanded();
                expandedRow.remove();
                spaceRowTop.remove();
                spaceRowBottom.remove();
            }
        };
    }, [cellProps.row, expandedRow, spaceRowTop, spaceRowBottom]);
    return (React.createElement("div", { ...parentProps,
            ref: expanderRef,
            onClick: disableExpandButton ? () => null : handleExpand
        },
        labels ? (React.createElement(ExpanderText, {
            labels: labels,
            expanded: cellProps ? .row.getIsExpanded(),
            disabled: disableExpandButton
        })) : ToggleBtn ? (React.createElement(ToggleBtn, {
            isOpen: cellProps ? .row.getIsExpanded(),
            disabled: disableExpandButton,
            rowData: cellProps.row.original
        })) : null,
        cellProps ? .row.getIsExpanded() ?
        expandedRowRef.current ?
        ReactDOM.createPortal(React.createElement("td", {
            ref: tdRef,
            colSpan: cellProps ? .table.getAllColumns().length
        }, children), expandedRowRef.current) :
        null :
        null));
};