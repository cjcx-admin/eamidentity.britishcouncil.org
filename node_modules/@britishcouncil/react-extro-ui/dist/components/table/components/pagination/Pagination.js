import React from 'react';
import * as S from './Pagination.styles';
export const Pagination = ({
    allResults = 0,
    table,
    showResultsAfterSearchApplied = false,
    showAllResultsCount,
    showPagination,
}) => {
    const currentPage = table.getState().pagination.pageIndex + 1;
    const pageOptions = table.getPageOptions().map((p) => ({
        label: String(p + 1),
        value: p
    }));
    const rowsLength = table.getFilteredRowModel().rows.length;
    return (React.createElement(S.Root, {
            className: "extroui-table-pagination",
            showAllResultsCount: showAllResultsCount
        },
        showAllResultsCount && (React.createElement(S.AllResults, null,
            "All results: ",
            React.createElement("strong", null, showResultsAfterSearchApplied ? rowsLength : allResults))),
        showPagination && (React.createElement(S.PaginationRoot, null,
            React.createElement("button", {
                onClick: () => table.previousPage(),
                disabled: !table.getCanPreviousPage()
            }, "Previous"),
            React.createElement(S.PageChooser, null,
                React.createElement(S.Pages, null,
                    table.getCanPreviousPage() && (React.createElement(React.Fragment, null,
                        currentPage > 2 && React.createElement("div", null, "..."),
                        React.createElement("button", {
                            onClick: () => table.previousPage()
                        }, currentPage - 1))),
                    React.createElement("strong", null, currentPage),
                    table.getCanNextPage() && (React.createElement(React.Fragment, null,
                        React.createElement("button", {
                            onClick: () => table.nextPage()
                        }, currentPage + 1),
                        table.getPageCount() - currentPage > 1 && React.createElement("div", null, "...")))),
                React.createElement(S.Jump, null,
                    React.createElement("div", null, "Jump to:"),
                    React.createElement(S.StyledSelect, {
                        onChange: (v) => table.setPageIndex(Number(v ? .value) ? ? 1),
                        options: pageOptions,
                        value: pageOptions.find((p) => p.value + 1 === currentPage),
                        placeholder: currentPage
                    }))),
            React.createElement("button", {
                onClick: () => table.nextPage(),
                disabled: !table.getCanNextPage()
            }, "Next")))));
};