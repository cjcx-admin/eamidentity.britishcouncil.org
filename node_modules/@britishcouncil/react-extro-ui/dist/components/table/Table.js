import React, {
    useCallback,
    useEffect
} from 'react';
import {
    getCoreRowModel,
    getFilteredRowModel,
    getPaginationRowModel,
    getSortedRowModel,
    useReactTable,
} from '@tanstack/react-table';
import * as S from './Table.styles';
import {
    Pagination
} from './components/pagination/Pagination';
import {
    actionsColumn
} from './components/actions/actionsColumn';
import {
    useCheckbox
} from './components/checkbox';
import {
    TableTopBarActions,
    TableBody,
    TableHeader
} from './components/tableElements';
import {
    globalFilterFn,
    useGlobalFilter
} from './features/useGlobalFilter';
import {
    isRowDisabled
} from './components/infoRow/helpers';
export const Table = ({
    allResults,
    defaultSorting,
    disableCheckbox,
    displayPagination = true,
    externalToggleAllHangler,
    externalAllSelected,
    externalHandleSorting,
    externalSelectedCount,
    externalSortingValue,
    globalFilterValue,
    infoRows,
    keepHeight = true,
    nested = false,
    NoDataRow,
    paginationSize,
    parentProps,
    RowActions,
    showAllResultsCount = true,
    showCheckbox = false,
    showResultsAfterSearchApplied = false,
    showToggleAll = false,
    sortingOptions,
    tableProps,
    TableActions,
}) => {
    const {
        data,
        columns,
        ...reactTableProps
    } = tableProps;
    const {
        checkboxCol,
        checkBoxRef
    } = useCheckbox(showCheckbox, disableCheckbox, infoRows);
    const actions = actionsColumn(RowActions, infoRows);
    const table = useReactTable({
        data,
        columns: [...checkboxCol, ...columns, ...actions],
        globalFilterFn,
        getCoreRowModel: getCoreRowModel(),
        getSortedRowModel: getSortedRowModel(),
        getFilteredRowModel: getFilteredRowModel(),
        getPaginationRowModel: getPaginationRowModel(),
        // https://github.com/TanStack/table/discussions/4179#discussioncomment-3631326
        defaultColumn: {
            minSize: 0,
            size: 0,
        },
        ...reactTableProps,
        initialState: {
            ...reactTableProps.initialState,
            pagination: paginationSize ? {
                pageSize: paginationSize
            } : undefined,
        },
    });
    const disabledRows = useCallback(() => {
        const allRows = table.getCoreRowModel().rows;
        return infoRows || disableCheckbox ?
            allRows.reduce((acc, curr) => {
                const disabledRow = infoRows ? isRowDisabled(infoRows(curr.original)) : false;
                const disabledCheckbox = disableCheckbox ? disableCheckbox(curr.original) : false;
                return disabledRow || disabledCheckbox ? { ...acc,
                    [curr.id]: false
                } : acc;
            }, {}) :
            {};
    }, [disableCheckbox, infoRows, table]);
    const isAllSelected = () => {
        if (typeof externalAllSelected !== 'undefined') {
            return externalAllSelected;
        }
        const allRows = table.getCoreRowModel().rows;
        return (allRows.filter((el) => {
            return !(el.getIsSelected() || disabledRows()[el.id] !== undefined);
        }).length === 0 && allRows.filter((el) => disabledRows()[el.id] === undefined).length !== 0);
    };
    const state = table.getState();
    /* Show pagination when user provides custom "pageSize" and not forces to hide pagination with "displayPagination" prop. */
    const showPagination = displayPagination && !!paginationSize;
    useGlobalFilter({
        table,
        globalFilterValue
    });
    /** Set default sorting on initial render */
    useEffect(() => {
        const isSortingSet = state.sorting.length > 0;
        defaultSorting &&
            !isSortingSet &&
            table.setSorting([{
                id: String(defaultSorting ? .columnId) ? ? '',
                desc: defaultSorting ? .desc ? ? false
            }]);
    }, [defaultSorting, table, state]);
    const toggleAllHandler = () => {
        if (externalToggleAllHangler) {
            externalToggleAllHangler();
            return;
        }
        table.toggleAllRowsSelected(!isAllSelected());
        table.setRowSelection((s) => {
            return { ...s,
                ...disabledRows()
            };
        });
    };
    return (React.createElement(S.Root, { ...parentProps,
            className: "extroui-table-root"
        }, !nested && (React.createElement(TableTopBarActions, {
            externalSelectedCount: externalSelectedCount,
            externalHandleSorting: externalHandleSorting,
            externalSortingValue: externalSortingValue,
            isAllSelected: isAllSelected(),
            ref: checkBoxRef,
            sortingOptions: sortingOptions,
            showCheckbox: showCheckbox,
            showToggleAll: showToggleAll,
            table: table,
            TableActions: TableActions,
            toggleAllHandler: toggleAllHandler
        })),
        React.createElement(S.StyledTable, {
                nested: nested,
                className: "extroui-table-wrapper"
            },
            React.createElement("table", null,
                React.createElement("thead", null,
                    React.createElement(TableHeader, {
                        table: table
                    })),
                React.createElement("tbody", null,
                    React.createElement(TableBody, {
                        infoRows: infoRows,
                        keepHeight: keepHeight,
                        NoDataRow: NoDataRow,
                        showPagination: showPagination,
                        table: table
                    })))), !nested && (React.createElement(Pagination, {
            allResults: allResults || data.length,
            table: table,
            showAllResultsCount: showResultsAfterSearchApplied || showAllResultsCount,
            showPagination: showPagination,
            showResultsAfterSearchApplied: showResultsAfterSearchApplied
        }))));
};