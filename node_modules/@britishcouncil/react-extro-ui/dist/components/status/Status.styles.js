import styled from '@emotion/styled';
import {
    css
} from '@emotion/react';
import {
    hexWithOpacity
} from '@britishcouncil/react-common';
import {
    spacingFn
} from '../../theme';
export const Root = styled.div `
  padding: ${spacingFn(0.5)} ${spacingFn(1.5)};
  display: inline-block;
  border-radius: ${({ theme }) => theme.spacing.md};
  color: #fff;
  width: fit-content;

  ${({ theme, color, variant }) => {
    let bgColor;
    let textColor;
    const isTransparent = variant === 'transparent';
    switch (color) {
        case 'yellow':
            bgColor = isTransparent ? theme.colors.yellow : theme.colors.darkYellow;
            textColor = theme.colors.darkBrown;
            break;
        case 'orange':
            bgColor = isTransparent ? theme.colors.lightOrange : theme.colors.darkOrange;
            textColor = theme.colors.darkOrange;
            break;
        case 'red':
            bgColor = isTransparent ? theme.colors.lightRed : theme.colors.darkRed;
            textColor = theme.colors.darkRed;
            break;
        case 'pink':
            bgColor = isTransparent ? theme.colors.lightPink : theme.colors.darkPink;
            textColor = theme.colors.darkPink;
            break;
        case 'purple':
            bgColor = isTransparent ? theme.colors.lightPurple : theme.colors.darkPurple;
            textColor = theme.colors.darkPurple;
            break;
        case 'blue':
            bgColor = isTransparent ? theme.colors.lightBlue : theme.colors.darkBlue;
            textColor = theme.colors.darkBlue;
            break;
        case 'teal':
            bgColor = isTransparent ? theme.colors.lightTeal : theme.colors.darkTeal;
            textColor = theme.colors.darkTeal;
            break;
        case 'green':
            bgColor = isTransparent ? theme.colors.lightGreen : theme.colors.darkGreen;
            textColor = theme.colors.darkGreen;
            break;
        case 'petrol':
            bgColor = isTransparent ? theme.colors.lightPetrol : theme.colors.darkPetrol;
            textColor = theme.colors.darkPetrol;
            break;
        case 'brown':
            bgColor = isTransparent ? theme.colors.lightBrown : theme.colors.darkBrown;
            textColor = theme.colors.darkBrown;
            break;
        case 'grey':
        default:
            bgColor = isTransparent ? theme.colors.lightGrey : theme.colors.darkGrey;
            textColor = theme.colors.darkGrey;
            break;
    }
    if (variant === 'opaque')
        textColor = '#fff';
    if (variant === 'transparent')
        bgColor = hexWithOpacity(bgColor, 0.25);
    return css `
background: $ {
    bgColor
};
color: $ {
    textColor
};
`;
}};
`;