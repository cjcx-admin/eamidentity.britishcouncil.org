import React, {
    useEffect,
    useRef,
    useState
} from 'react';
import * as S from './StickyContainer.style';
export const StickyContainer = ({
    children,
    customWidth,
    disabled,
    initialOffset = 0,
    keepParentWidth,
    offsetByHeight,
    ...rest
}) => {
    const internalRef = useRef(null);
    const [sticky, setSticky] = useState(false);
    const [innerWidthWhenSticky, setinnerWidthWhenSticky] = useState(customWidth);
    useEffect(() => {
        window.addEventListener('scroll', isSticky);
        return () => {
            window.removeEventListener('scroll', isSticky);
        };
    });
    const isSticky = () => {
        if (internalRef.current && !disabled) {
            setSticky(internalRef.current.getBoundingClientRect().y < initialOffset);
            if (keepParentWidth) {
                const width = internalRef.current.clientWidth;
                width && setinnerWidthWhenSticky(`${width}px`);
            }
        }
    };
    return (React.createElement(S.MainWrapper, {
            ref: internalRef,
            ...rest,
            "data-testid": "mainWrapper"
        },
        React.createElement(S.InnerWrapper, {
            className: sticky ? 'isSticky' : '',
            tabIndex: 0,
            "data-testid": "innerWrapper",
            offsetHeight: offsetByHeight ? `${offsetByHeight}px` : `0px`,
            sticky: sticky,
            customWidth: innerWidthWhenSticky
        }, children)));
};