import React from 'react';
import styled from '@emotion/styled';
import {
    css
} from '@emotion/react';
import {
    useExtroTheme
} from '../../theme';
export const Button = React.forwardRef(({
    children,
    color,
    size = 'standard',
    variant = 'primary',
    borderRadius = 'medium',
    elevation = 0,
    iconLeft,
    iconRight,
    ...rest
}, ref) => {
    const {
        colors
    } = useExtroTheme();
    const btnColor = color || colors.darkBlue;
    return (React.createElement(Btn, {
            size: size,
            variant: variant,
            borderRadius: borderRadius,
            color: btnColor,
            elevation: elevation,
            ...rest,
            ref: ref
        },
        iconLeft && React.createElement(Icon, null, iconLeft),
        React.createElement("span", null, children),
        iconRight && React.createElement(Icon, null, iconRight)));
});
const Icon = styled.span `
  display: inline-flex;

  :first-of-type {
    margin-inline-end: 12px;
  }

  :last-of-type {
    margin-inline-start: 12px;
  }
`;
const Btn = styled.button `
  font-family: Arial;
  font-weight: 700;
  font-size: 16px;
  text-align: center;
  display: inline-flex;
  align-items: center;
  justify-content: center;

  > span {
    display: inline-flex;
    align-items: center;
  }

  &:hover:not([disabled]) {
    cursor: pointer;
  }

  &[disabled] {
    opacity: 0.5;
    background: ${({ theme }) => theme.colors.lightGrey};
    color: ${({ theme }) => theme.colors.darkGrey};
  }

  ${({ size }) => {
    switch (size) {
        case 'standard':
            return css `
padding: 12 px 40 px;
`;
        case 'compact':
            return css `
padding: 12 px 20 px;
`;
    }
}}

  ${({ theme, elevation }) => {
    if (elevation) {
        return theme.elevation[elevation];
    }
}};

  ${({ variant, color }) => {
    switch (variant) {
        case 'primary':
            return css `
background: $ {
    color
};
color: white; &
: hover: not([disabled]) {
        background - image: linear - gradient(rgb(0 0 0 / 20 % ) 0 0);
    } &
    : active: not([disabled]) {
        background - image: linear - gradient(rgb(0 0 0 / 40 % ) 0 0);
    }
`;
        case 'secondary':
            return css `
background: white;
color: $ {
    color
};
border: 2 px solid $ {
    color
}; &
: hover: not([disabled]) {
        background - image: linear - gradient(rgb(0 0 0 / 5 % ) 0 0);
    } &
    : active: not([disabled]) {
        background - image: linear - gradient(rgb(0 0 0 / 10 % ) 0 0);
    } &
    [disabled] {
        border: none;
    }
`;
        case 'discreet':
            return css `
background: none;
color: $ {
    color
};
padding: 12 px 20 px; &
[disabled] {
    background: none;
}
`;
    }
}}

  ${({ borderRadius }) => {
    switch (borderRadius) {
        case 'small':
            return css `
border - radius: 4 px;
`;
        case 'medium':
            return css `
border - radius: 8 px;
`;
        case 'rounded':
            return css `
border - radius: 300 px;
`;
    }
}}

  &:focus-visible {
    box-shadow: ${({ theme }) => `
inset 0 0 0 0.2 rem $ {
    theme.colors.orange
}
`};
  }
`;