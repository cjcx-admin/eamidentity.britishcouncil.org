import {
    formatBytes
} from '@britishcouncil/common-core';
import classNames from 'classnames';
import React, {
    useMemo,
    useState
} from 'react';
import {
    useDropzone
} from 'react-dropzone';
import {
    CloseIcon,
    DocumentIcon,
    UploadIcon
} from '../../icons';
import * as S from './FileUploader.style';
import {
    LoaderSimple
} from '../loaders';
export const FileUploader = ({
    accept,
    className,
    disabled,
    onChange,
    maxSize = 100000,
    title,
    onError,
    onDragEnter: customOnDragEnter,
    onDragLeave: customOnDragLeave,
    loading,
    multiple,
    ...restProps
}) => {
    const [files, setFiles] = useState([]);
    const [isOnDrag, setIsOnDrag] = useState(false);
    const [errMessage, setErrMessage] = useState('');
    const acceptedFormats = useMemo(() => (accept ? Object.values(accept).flat().join(', ') : ''), [accept]);
    const onRemoveFile = (file) => {
        if (loading)
            return;
        const updatedFiles = [...files];
        updatedFiles.splice(updatedFiles.indexOf(file), 1);
        setFiles(updatedFiles);
        onChange(updatedFiles);
    };
    const onDragEnter = (e) => {
        setIsOnDrag(true);
        if (customOnDragEnter)
            customOnDragEnter(e);
    };
    const onDragLeave = (e) => {
        setIsOnDrag(false);
        if (customOnDragLeave)
            customOnDragLeave(e);
    };
    const onDrop = (acceptedFiles, fileRejections) => {
        setIsOnDrag(false);
        setErrMessage('');
        if (fileRejections.length && fileRejections[0].errors.length) {
            /* Do not use not user friendly values as "application/msword" and provide file extensions only, like ".xslx"  */
            const msg = fileRejections[0].errors[0].code === 'file-invalid-type' ?
                `You can upload only ${acceptedFormats} files.` :
                fileRejections[0].errors[0].message;
            setErrMessage(msg);
        }
        setFiles(acceptedFiles);
        onChange(acceptedFiles);
    };
    const {
        getRootProps,
        getInputProps
    } = useDropzone({
        accept,
        onDrop,
        disabled,
        onDragEnter,
        onDragLeave,
        maxSize,
        onError,
        multiple,
    });
    return (React.createElement("div", {
            className: "extroui-file-uploader"
        },
        title && React.createElement(S.Title, null, title),
        React.createElement(S.Container, {
            className: classNames(className, {
                disabled: loading ? ? disabled,
                'on-drag': isOnDrag,
            }),
            ...restProps,
            ...getRootProps()
        }, loading ? (React.createElement(LoaderSimple, null)) : (React.createElement(React.Fragment, null,
            React.createElement("input", { ...getInputProps()
            }),
            React.createElement(UploadIcon, null),
            React.createElement(S.Text, null,
                React.createElement("span", null, "Choose file "),
                "or drag & drop to upload"),
            React.createElement(S.SmallText, null,
                maxSize !== Infinity && React.createElement("span", null, `Maximum file size ${formatBytes(maxSize, 0)} - `),
                React.createElement("span", null, acceptedFormats))))),
        errMessage && React.createElement(S.Error, null, errMessage), !!files.length && (React.createElement(S.FilesList, {
            loading: loading
        }, files.map((file) => (React.createElement(S.FileItem, {
                key: file.lastModified
            },
            React.createElement(S.FileName, null,
                React.createElement(DocumentIcon, null),
                file.name),
            React.createElement("span", {
                    tabIndex: 1,
                    onClick: () => onRemoveFile(file)
                },
                React.createElement(CloseIcon, null)))))))));
};