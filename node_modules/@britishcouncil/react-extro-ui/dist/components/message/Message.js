import React, {
    useMemo
} from 'react';
import {
    SvgWarningIcon,
    SvgErrorIcon,
    SvgSuccessIcon,
    SvgInfoIcon
} from './components';
import S from './Message.style';
const iconsMap = {
    warning: React.createElement(SvgWarningIcon, null),
    success: React.createElement(SvgSuccessIcon, null),
    error: React.createElement(SvgErrorIcon, null),
    info: React.createElement(SvgInfoIcon, null),
    grey: '',
    violet: '',
};
export const Message = ({
    children,
    hideIcon = false,
    icon,
    variant,
    size,
    header,
    sideContent,
    iconAlign = 'container',
    sideContentAlign = 'container',
    iconSize,
    color,
    background,
    ...restProps
}) => {
    const iconTestId = 'message-icon';
    const iconToDisplay = useMemo(() => {
        const hasVariantIcon = !hideIcon && variant && iconsMap[variant];
        const shouldShowVariantIcon = hasVariantIcon && !icon;
        if (shouldShowVariantIcon) {
            return iconsMap[variant];
        } else if (icon) {
            return icon;
        } else {
            return null;
        }
    }, [hideIcon, variant, icon]);
    const alignHeaderToFirstRow = iconAlign === 'header' || !header || !children;
    const alignSideContentToFirstRow = sideContentAlign === 'header' || !header || !children;
    return (React.createElement(S.Container, {
            "data-testid": "message-container",
            ...restProps,
            variant: variant,
            size: size,
            color: color,
            background: background
        },
        React.createElement(S.Icon, {
            hidden: !iconToDisplay,
            alignToFirstRow: alignHeaderToFirstRow,
            "data-testid": iconTestId,
            size: size,
            iconSize: iconSize
        }, iconToDisplay),
        header && React.createElement(S.Header, {
            size: size
        }, header),
        children && React.createElement(S.ContentContainer, null, children),
        sideContent && (React.createElement(S.SideContentContainer, {
            size: size,
            alignToFirstRow: alignSideContentToFirstRow
        }, sideContent))));
};