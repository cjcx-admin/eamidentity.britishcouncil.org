import React, {
    useMemo,
    useCallback
} from 'react';
import ReactSelect, {
    components,
} from 'react-select';
import {
    FiChevronDown,
    FiChevronUp
} from 'react-icons/fi';
import {
    FaTimes
} from 'react-icons/fa';
import {
    useExtroTheme
} from '../../theme';
const withCondition = (condition, css) => {
    return condition ? css : {};
};
export const Select = ({
    hasError,
    isMulti = false,
    customOption,
    ...selectProps
}) => {
    const DropdownIndicator = useCallback((props) => {
        return (React.createElement(components.DropdownIndicator, { ...props
        }, props.selectProps.menuIsOpen ? React.createElement(FiChevronUp, {
            size: 21
        }) : React.createElement(FiChevronDown, {
            size: 21
        })));
    }, []);
    const ClearIndicator = useCallback((props) => {
        return (React.createElement(components.ClearIndicator, { ...props
            },
            React.createElement(FaTimes, {
                size: 24
            })));
    }, []);
    const Option = useCallback((props) => {
        return (React.createElement(components.Option, { ...props
        }, customOption ? customOption(props.data) : props.children));
    }, [customOption]);
    const SingleValue = ({
        children,
        ...props
    }) => {
        const selectedValue = props.selectProps.value;
        const selectedOption = props.getValue().find((x) => x.value == selectedValue ? .value);
        const customOptionContent = customOption && selectedOption && (React.createElement("span", {
            className: "extro-selected-custom-option"
        }, customOption(selectedOption)));
        return React.createElement(components.SingleValue, { ...props
        }, customOptionContent ? ? children);
    };
    const {
        colors
    } = useExtroTheme();
    const style = useMemo(() => ({
        control: (provided, state) => ({
            ...provided,
            borderRadius: '8px',
            borderColor: colors.darkGrey,
            borderWidth: 2,
            ':hover': {
                borderColor: colors.darkGrey,
                boxShadow: `0 0 0 1px ${colors.darkGrey}`,
            },
            '&&': {
                ...withCondition(state.isFocused, {
                    borderColor: colors.darkBlue,
                    boxShadow: `0 0 0 1px ${colors.darkBlue}`,
                }),
            },
            '&&&': {
                ...withCondition(!!hasError, {
                    borderColor: colors.darkRed,
                    boxShadow: `0 0 0 1px ${colors.darkRed}`,
                }),
            },
            '&&&&': {
                ...withCondition(state.isDisabled, {
                    backgroundColor: colors.lightGrey,
                    cursor: 'not-allowed',
                    borderColor: colors.lightGrey,
                }),
            },
        }),
        valueContainer: (provided, state) => ({
            ...provided,
            padding: '16px',
            '&&': {
                ...withCondition(state.isMulti && state.hasValue, {
                    padding: '7px 16px',
                }),
            },
        }),
        placeholder: (provided) => ({
            ...provided,
            fontSize: '16px',
        }),
        noOptionsMessage: (provided) => ({
            ...provided,
            fontSize: '16px',
        }),
        input: (provided) => ({
            ...provided,
            fontSize: '16px',
            paddingBottom: 0,
            paddingTop: 0,
            margin: 0,
            'input:focus-visible': {
                boxShadow: 'none',
            },
        }),
        singleValue: (provided) => ({
            ...provided,
            fontSize: '16px',
            fontWeight: 700,
            color: colors.darkGrey,
        }),
        multiValue: (provided) => ({
            ...provided,
            borderRadius: '999px',
            padding: '0px 10px 0px 16px',
            height: '32px',
            color: 'white',
            background: colors.darkBlue,
        }),
        multiValueLabel: (provided) => ({
            ...provided,
            fontSize: '16px',
            fontWeight: '700',
            color: 'white',
            display: 'flex',
            alignItems: 'center',
        }),
        multiValueRemove: (provided) => ({
            ...provided,
            cursor: 'pointer',
            ':hover': {
                background: 'transparent',
            },
            svg: {
                height: '20px',
                width: '20px',
            },
        }),
        menu: (provided) => ({
            ...provided,
            borderRadius: '8px',
        }),
        menuList: (provided) => ({
            ...provided,
            padding: 0,
        }),
        option: (_, state) => ({
            borderBottom: `1px solid ${colors.lightGrey}80`,
            padding: '18px 32px',
            color: '#333333',
            fontSize: '18px',
            ...withCondition(state.isFocused, {
                backgroundColor: `${colors.lightBlue}26`,
            }),
            '&&&': {
                ...withCondition(state.isSelected, {
                    backgroundColor: colors.darkBlue,
                    color: 'white',
                    fontWeight: 700,
                    ':active': {
                        backgroundColor: '#00376f',
                    },
                }),
            },
            '&&&&': {
                ...withCondition(state.isDisabled, {
                    backgroundColor: `${colors.lightGrey}33`,
                    color: `${colors.darkGrey}99`,
                    cursor: 'not-allowed',
                    ...withCondition(state.isSelected, {
                        color: `${colors.darkBlue}80`,
                    }),
                }),
            },
            ':hover': {
                cursor: 'pointer',
                backgroundColor: `${colors.lightBlue}26`,
            },
            ':active': {
                backgroundColor: colors.darkBlue,
                color: 'white',
            },
            ':last-child': {
                borderBottom: 'none',
                borderBottomLeftRadius: '8px',
                borderBottomRightRadius: '8px',
            },
            ':first-of-type': {
                borderTopLeftRadius: '8px',
                borderTopRightRadius: '8px',
            },
        }),
    }), [hasError, colors]);
    return (React.createElement(ReactSelect, { ...selectProps,
        styles: style,
        options: selectProps.options,
        value: selectProps.value,
        defaultValue: selectProps.defaultValue,
        isOptionDisabled: (option) => !!option.disabled,
        components: {
            DropdownIndicator,
            ClearIndicator,
            IndicatorSeparator: null,
            Option,
            SingleValue
        },
        classNamePrefix: "extro-select",
        closeMenuOnSelect: !isMulti,
        isMulti: isMulti,
        onChange: (value, meta) => {
            if (selectProps.onChange) {
                selectProps.onChange(value, meta);
            }
        }
    }));
};