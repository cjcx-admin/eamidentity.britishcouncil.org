import {
    useMemo,
    useState
} from 'react';
import React from 'react';
import {
    FiChevronDown,
    FiGlobe
} from 'react-icons/fi';
import useCurrentBreakpoint from '../../hooks/useCurrentBreakpoint';
import {
    Button
} from '../button';
import {
    theme
} from '../../theme/theme';
import {
    StyledLanguageSelector
} from './LanguageSelector.styles';
export const LanguageSelector = ({
    availableLanguages,
    initialValue,
    onChange
}) => {
    const breakpoint = useCurrentBreakpoint();
    const [selectedLanguageCode, setSelectedLanguageCode] = useState(initialValue);
    const selectedLanguage = useMemo(() => {
        const language = availableLanguages.find((x) => x.code === selectedLanguageCode);
        const codeFormatted = language ? .code.toUpperCase();
        if (breakpoint === 'xs') {
            return codeFormatted;
        } else {
            return `${codeFormatted} - ${language?.name}`;
        }
    }, [breakpoint, availableLanguages, selectedLanguageCode]);
    return (React.createElement(StyledLanguageSelector, {
            initialValue: initialValue,
            elements: availableLanguages.map((x) => ({
                label: x.name,
                value: x.code
            })),
            onChange: (languageCode) => {
                setSelectedLanguageCode(languageCode);
                onChange(languageCode);
            }
        },
        React.createElement(Button, {
            variant: "discreet",
            color: theme.colors.blue,
            iconLeft: React.createElement(FiGlobe, {
                size: 24
            }),
            iconRight: React.createElement(FiChevronDown, {
                size: 24
            })
        }, selectedLanguage)));
};