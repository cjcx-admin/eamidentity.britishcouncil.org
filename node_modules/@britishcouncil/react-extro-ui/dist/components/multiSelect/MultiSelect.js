import React, {
    useMemo
} from 'react';
import {
    Checkbox
} from '../checkbox';
import * as S from './MultiSelect.style';
import {
    CloseIcon
} from '../../icons';
import classnames from 'classnames';
export const MultiSelect = ({
    placeholder = 'Select',
    value,
    onChange,
    maximumDisplayedItems = 3,
    compactOptions,
    disabled,
    options,
    maxAmountOfSelectedOptions,
    ...multiSelectProps
}) => {
    const handleOnChange = (options) => {
        if (!maxAmountOfSelectedOptions || options.length <= maxAmountOfSelectedOptions) {
            onChange(options);
        }
    };
    const displayedOptions = useMemo(() => {
        const selectedOptions = options.filter((option) => !value.find((valueOption) => valueOption.value === option.value));
        return maxAmountOfSelectedOptions && value.length === maxAmountOfSelectedOptions ?
            options.map((option) => {
                if (selectedOptions.includes(option)) {
                    return { ...option,
                        disabled: true
                    };
                } else {
                    return option;
                }
            }) :
            options;
    }, [options, maxAmountOfSelectedOptions, value]);
    return (React.createElement(S.MultiSelectContainer, {
        onChange: handleOnChange,
        className: classnames({
            disabled,
        }),
        disabled: disabled,
        ClearSelectedIcon: null,
        value: value,
        options: displayedOptions,
        valueRenderer: (selected) => renderDisplayedValue({
            selected,
            placeholder,
            onChange,
            maximumDisplayedItems
        }),
        ItemRenderer: (props) => React.createElement(Item, { ...props,
            compact: compactOptions
        }),
        ...multiSelectProps
    }));
};
const Item = ({
    checked,
    option,
    onClick,
    disabled,
    compact
}) => {
    return (React.createElement(S.ItemContainer, {
            className: classnames({
                compact,
            })
        },
        React.createElement(Checkbox, {
            value: checked,
            onChange: onClick,
            disabled: disabled,
            className: !option.value ? 'select-all-option' : '',
            label: !option.value ? 'ALL' : option.label,
            hideFrame: true
        })));
};
const renderDisplayedValue = ({
    selected,
    placeholder,
    onChange,
    maximumDisplayedItems
}) => {
    if (selected ? .length && selected.length > maximumDisplayedItems) {
        return (React.createElement("span", {
                onClick: (e) => {
                    e.stopPropagation();
                    onChange([]);
                }
            },
            selected.length,
            " selected ",
            React.createElement(CloseIcon, null)));
    } else if (selected ? .length) {
        return selected.map(({
            label,
            value
        }) => (React.createElement("span", {
                onClick: (e) => {
                    e.stopPropagation();
                    onChange(selected.filter((s) => s.value !== value));
                }
            },
            label,
            React.createElement(CloseIcon, null))));
    } else {
        return placeholder;
    }
};