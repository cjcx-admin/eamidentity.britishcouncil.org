import React, {
    useCallback,
    useEffect,
    useRef,
    useState
} from 'react';
import styled from '@emotion/styled';
import {
    useClickOutside
} from '@britishcouncil/react-common';
import {
    FiLoader
} from 'react-icons/fi';
import useDropdownExpandRight from '../../hooks/useDropdownExpandRight';
import {
    css
} from '@emotion/react';
import {
    theme
} from '../../theme/theme';
export const Dropdown = ({
    autoFocus,
    children,
    elements,
    error,
    onChange,
    onOpen,
    initialValue,
    isLoading,
    tabIndex,
    variant = 'default',
    ...rest
}) => {
    const ref = useRef(null);
    const refTrigger = useRef(null);
    const refList = useRef(null);
    const optionsLIRef = useRef([]);
    const [opened, setOpened] = useState(false);
    const [currentValue, setCurrentValue] = useState(initialValue);
    const shouldExpandRight = useDropdownExpandRight(refList, ref, opened);
    useClickOutside(ref, () => setOpened(false), refTrigger, () => setOpened(!opened));
    useEffect(() => {
        if (onOpen)
            onOpen(opened);
        if (opened && autoFocus && optionsLIRef.current[0]) {
            optionsLIRef.current[0].focus();
        }
    }, [opened, onOpen, autoFocus]);
    const handleClick = useCallback((value) => {
        setCurrentValue(value);
        if (onChange) {
            onChange(value);
        }
        closeDropdown();
    }, [onChange]);
    const handleTriggerKeyDown = useCallback((event) => {
        switch (event.key) {
            case ' ':
            case 'Enter':
            case 'SpaceBar':
                event.preventDefault();
                setOpened(!opened);
                break;
            case 'ArrowDown':
                event.preventDefault();
                event.stopPropagation();
                if (!opened) {
                    setOpened(true);
                } else {
                    optionsLIRef.current[0].focus();
                }
                break;
            default:
                break;
        }
    }, [opened]);
    const handleListKeyDown = useCallback((event) => {
        const currentElementIndex = optionsLIRef.current.findIndex((el) => el === document.activeElement);
        switch (event.key) {
            case ' ':
            case 'Enter':
            case 'SpaceBar':
                event.preventDefault();
                currentElementIndex !== -1 && handleClick(elements[currentElementIndex].value);
                if (elements[currentElementIndex].href) {
                    window.open(elements[currentElementIndex].href, elements[currentElementIndex].target ? ? '_blank');
                }
                break;
            case 'Escape':
                closeDropdown();
                break;
            case 'ArrowUp':
                event.preventDefault();
                if (optionsLIRef.current[currentElementIndex - 1]) {
                    optionsLIRef.current[currentElementIndex - 1].focus();
                } else {
                    closeDropdown();
                }
                break;
            case 'ArrowDown':
                event.preventDefault();
                if (optionsLIRef.current[currentElementIndex + 1]) {
                    optionsLIRef.current[currentElementIndex + 1].focus();
                } else {
                    closeDropdown();
                }
                break;
            default:
                break;
        }
    }, [handleClick, elements]);
    const closeDropdown = () => {
        ref.current ? .blur();
        setOpened(false);
        refTrigger.current && refTrigger.current.focus();
    };
    return (React.createElement(DropdownWrapper, {
            ref: ref,
            ...rest,
            onKeyDown: handleListKeyDown,
            opened: opened
        },
        React.createElement(DropdownTrigger, {
            ref: refTrigger,
            tabIndex: tabIndex ? tabIndex : undefined,
            onKeyDown: handleTriggerKeyDown
        }, children),
        opened && (React.createElement(React.Fragment, null,
            isLoading && (React.createElement(DropdownLoader, {
                    ref: refList,
                    error: error,
                    shouldExpandRight: shouldExpandRight
                }, !error && React.createElement(FiLoader, {
                    size: 20
                }),
                error && React.createElement(React.Fragment, null, error))), !isLoading && (React.createElement(DropdownList, {
                ref: refList,
                shouldExpandRight: shouldExpandRight,
                variant: variant
            }, elements.map(({
                disabled,
                href,
                label,
                target,
                value
            }, index) => {
                return (React.createElement(DropdownElement, {
                    disabled: disabled,
                    "data-test-id": value ? ? label,
                    key: value,
                    link: !!href,
                    selected: currentValue === value,
                    variant: variant,
                    onClick: () => {
                        if (!disabled)
                            handleClick(value);
                    },
                    ref: (el) => {
                        if (el)
                            optionsLIRef.current[index] = el;
                    },
                    tabIndex: 0
                }, !!href ? (React.createElement(DropdownLink, {
                    variant: variant,
                    tabIndex: -1,
                    href: href,
                    target: target
                }, label ? ? value)) : (React.createElement(React.Fragment, null, label ? ? value))));
            })))))));
};
const DropdownWrapper = styled.div `
  position: relative;

  .hideWhenClosed {
    display: none;
  }

  ${({ opened }) => opened &&
    `
    .hideWhenClosed {
        display: block;
    }
    .hideWhenOpened {
        display: none;
    }
`};
`;
const DropdownList = styled.ul `
  background: #fff;
  border-radius: 12px;
  border: 1px solid #fff;
  ${({ theme }) => theme.elevation[5]}

  ${({ shouldExpandRight }) => (shouldExpandRight ? 'left: 0;' : 'right: 0;')}
  min-width: 300px;
  position: absolute;
  top: 100%;
  z-index: 1;
  ${({ variant }) => (variant === 'compact' ? `
max - height: calc(56 px * 5);
` : `
max - height: calc(64 px * 5);
`)};

  overflow-y: scroll;

  ::-webkit-scrollbar {
    display: none;
  }
`;
const DropdownLink = styled.a `
  color: inherit;
  display: block;
  font-size: inherit;
  font-weight: inherit;
  text-decoration: none;
  ${({ variant }) => (variant === 'compact' ? `
padding: 16 px 32 px;
` : `
padding: 20 px 32 px;
`)};
  width: 100%;
`;
const elementSelected = css `
  background: ${theme.colors.dropdown.background.selected};
  color: ${theme.colors.dropdown.text.selected};
`;
const elementHovered = css `
  background: ${theme.colors.dropdown.background.hover};
  color: ${theme.colors.dropdown.text.hover};
`;
const elementDisabled = css `
  background: ${theme.colors.dropdown.background.disabled};
  color: ${theme.colors.dropdown.text.disabled};
  cursor: no-drop;
`;
const elementActive = css `
  background: ${theme.colors.dropdown.background.active};
  color: ${theme.colors.dropdown.text.active};
  font-size: ${theme.fontSize.desktop.body};
`;
const elementDefault = css `
  background: ${theme.colors.dropdown.background.default};
  color: ${theme.colors.dropdown.text.default};
  font-size: ${theme.fontSize.desktop.body};
  cursor: pointer;
`;
const DropdownTrigger = styled.div ``;
const DropdownElement = styled.li `
  ${elementDefault};
  ${({ variant }) => (variant === 'compact' ? `
padding: 16 px 32 px;
` : `
padding: 20 px 32 px;
`)};

  &:not(:first-of-type) {
    border-top: 1px solid ${({ theme }) => theme.colors.lightGrey};
  }

  &:focus {
    ${({ disabled }) => !disabled && elementSelected};
  }
  ${({ selected }) => selected && elementSelected};

  ${({ disabled }) => disabled && elementDisabled};

  &:hover {
    ${({ disabled, selected }) => !disabled && !selected && elementHovered};
    ${({ disabled, selected }) => !disabled && selected && elementActive};
  }

  &:active {
    ${({ disabled }) => !disabled && elementActive};
  }

  ${({ link }) => link && `
padding: 0;
`};
`;
const DropdownLoader = styled('ul', {
    shouldForwardProp: (prop) => prop !== 'error'
})
`
  background: #fff;
  border-radius: 12px;
  border: 1px solid #fff;
  ${({ theme }) => theme.elevation[5]}
  ${({ error, theme }) => error && `
color: $ {
    theme.colors.red
}
`};

  ${({ shouldExpandRight }) => (shouldExpandRight ? 'left: 0;' : 'right: 0;')}
  min-width: 300px;
  padding: 16px;
  position: absolute;
  text-align: center;
  top: calc(100% + 8px);
  @keyframes icon-spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(359deg);
    }
  }

  > svg {
    animation: icon-spin 2s infinite linear;
  }
`;