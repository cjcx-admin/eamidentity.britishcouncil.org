import {
    useState,
    useEffect
} from 'react';
import {
    theme
} from '../theme/theme';
const useCurrentBreakpoint = () => {
    const [currentBreakpoint, setCurrentBreakpoint] = useState();
    useEffect(() => {
        let timeoutId;
        const handleResize = () => {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => {
                const windowWidth = window.innerWidth;
                let newBreakpoint = 'xs';
                if (windowWidth < theme.breakpoints.sm) {
                    newBreakpoint = 'xs';
                } else if (windowWidth < theme.breakpoints.md) {
                    newBreakpoint = 'sm';
                } else if (windowWidth < theme.breakpoints.lg) {
                    newBreakpoint = 'md';
                } else {
                    newBreakpoint = 'lg';
                }
                if (newBreakpoint !== currentBreakpoint) {
                    setCurrentBreakpoint(newBreakpoint);
                }
            }, 200);
        };
        // Initial call to set the initial breakpoint
        handleResize();
        window.addEventListener('resize', handleResize);
        return () => {
            clearTimeout(timeoutId);
            window.removeEventListener('resize', handleResize);
        };
    }, [currentBreakpoint]);
    return currentBreakpoint;
};
export default useCurrentBreakpoint;