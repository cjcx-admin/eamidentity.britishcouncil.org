import {
    useState,
    useEffect
} from 'react';

function useDropdownExpandRight(dropdownRef, parentRef, opened, margin = 24, debounceDelay = 300) {
    const [shouldExpandRight, setShouldExpandRight] = useState(true);
    useEffect(() => {
        let resizeTimeout;
        const checkPosition = () => {
            if (dropdownRef.current && parentRef.current) {
                const dropdownRect = dropdownRef.current.getBoundingClientRect();
                const parentRect = parentRef.current.getBoundingClientRect();
                const documentWidth = document.documentElement.clientWidth;
                // Calculate the right boundary for the dropdown when expanding right
                const dropdownRightBoundary = parentRect.left + dropdownRect.width + margin;
                // Calculate the left boundary for the dropdown when expanding left
                const dropdownLeftBoundary = parentRect.right - dropdownRect.width - margin;
                // Check if the dropdown fits within the document's width when expanding right
                if (dropdownRightBoundary <= documentWidth) {
                    setShouldExpandRight(true);
                }
                // Check if the dropdown fits within the document's width when expanding left
                else if (dropdownLeftBoundary >= 0) {
                    setShouldExpandRight(false);
                }
            }
        };
        const debouncedCheckPosition = () => {
            clearTimeout(resizeTimeout);
            // Only apply the debounce delay if 'opened' is false
            if (!opened) {
                resizeTimeout = setTimeout(checkPosition, debounceDelay);
            } else {
                // If 'opened' is true, invoke checkPosition immediately
                checkPosition();
            }
        };
        // Initial check
        debouncedCheckPosition();
        window.addEventListener('resize', debouncedCheckPosition);
        return () => {
            window.removeEventListener('resize', debouncedCheckPosition);
        };
    }, [parentRef, dropdownRef, margin, opened, debounceDelay]);
    return shouldExpandRight;
}
export default useDropdownExpandRight;