import React, {
    useEffect,
    useState
} from 'react';
import {
    DateTime,
    Info
} from 'luxon';
import {
    isInteger
} from 'lodash-es';
import styled from '@emotion/styled';
import {
    useId
} from '@britishcouncil/react-common';
import {
    Field,
    getFieldProps
} from './';
const limitDay = (value) => {
    const day = parseInt(value.match(/^\d+$/) ? .[0] ? ? '', 10);
    if (isInteger(day) && day > 0) {
        return Math.min(31, day).toString();
    }
    return '';
};
const normalizeInputValue = (value) => {
    const parsed = parseInt(value, 10);
    return isInteger(parsed) && parsed > 0 ? parsed : '';
};
const createValidDate = (year, month, day) => {
    const startOfMonth = DateTime.local(year, month);
    /**
     * Edge case: calculate max available day in month only when user type full year (i.e. year includes 4 digits).
     * Otherwise 29th of February (leap year) will be always changed to 28th when we start with year equal to "1" or "2".
     */
    const maxDay = year >= 1000 ? startOfMonth.daysInMonth : 31;
    return DateTime.local(year, month, Math.min(day, maxDay));
};

function parseIsoDate(val) {
    const parsed = val ? DateTime.fromISO(val) : null;
    if (parsed ? .isValid) {
        return parsed;
    }
    return null;
}
export const DateField = ({
    i18n = i18nDefault,
    locale = 'en',
    ...props
}) => {
    const [fieldProps, {
        name,
        value: inputValue,
        onChange,
        onBlur,
        labelControls = 'placeholder',
        disabled = false
    }] = getFieldProps(props);
    const generatedId = useId(`${props.name}-`);
    const id = props.id || generatedId;
    const value = parseIsoDate(inputValue);
    const [day, setDay] = useState(value ? .day ? ? '');
    const [month, setMonth] = useState(value ? .month ? ? '');
    const [year, setYear] = useState(value ? .year ? ? '');
    const [dayTouched, setDayTouched] = useState(false);
    const [monthTouched, setMonthTouched] = useState(false);
    const [yearTouched, setYearTouched] = useState(false);
    useEffect(() => {
        if (inputValue === '' && day && month && year) {
            setDay('');
            setMonth('');
            setYear('');
            return;
        }
        const value = parseIsoDate(inputValue);
        setDay(value ? .day ? ? day ? ? '');
        setMonth(value ? .month ? ? month ? ? '');
        setYear(value ? .year ? ? year ? ? '');
    }, [inputValue, day, month, year]);
    const handleChange = ({
        day,
        month,
        year
    }) => {
        const newDay = day ? ? value ? .day;
        const newMonth = month ? ? value ? .month;
        const newYear = year ? ? value ? .year;
        if (typeof newDay === 'number' && typeof newMonth === 'number' && typeof newYear === 'number') {
            const newDate = createValidDate(newYear, newMonth, newDay);
            onChange(newDate.toISODate());
        } else {
            onChange('');
        }
        setDay(day);
        setMonth(month);
        setYear(year);
    };
    const dispDay = value ? .day ? ? day ? ? '';
    const dispMonth = value ? .month ? ? month ? ? '';
    const dispYear = value ? .year ? ? year ? ? '';
    const minYear = props.mode === 'dob' ? 1900 : props.mode === 'general' ? 1000 : DateTime.local().year;
    const maxYear = props.mode === 'dob' ? DateTime.local().year : 3000;
    return (React.createElement(Field, { ...fieldProps,
            id: id,
            showColon: props.showColon
        },
        React.createElement("div", {
                className: "row clearfix"
            },
            React.createElement("div", {
                    className: "col-xs-3"
                },
                labelControls === 'inline' && React.createElement(GreyLabel, null, i18n.day),
                React.createElement("input", {
                    className: "form-control",
                    "data-testid": "dateSelectorDay",
                    type: "number",
                    name: name,
                    id: id,
                    placeholder: labelControls === 'placeholder' ? i18n.day : '',
                    value: dispDay,
                    onChange: (e) => handleChange({
                        day: normalizeInputValue(limitDay(e.target.value)),
                        month,
                        year
                    }),
                    onBlur: (e) => {
                        if (monthTouched && yearTouched) {
                            onBlur();
                        }
                        setDayTouched(true);
                    },
                    onWheel: (e) => e.currentTarget.blur(),
                    disabled: disabled,
                    dir: "ltr"
                })),
            React.createElement("div", {
                    className: "col-xs-5"
                },
                React.createElement(Label, null,
                    labelControls === 'inline' && React.createElement(GreyLabel, null, i18n.month),
                    React.createElement("select", {
                            className: "form-control",
                            "data-testid": "dateSelectorMonth",
                            name: name,
                            value: dispMonth,
                            onChange: (e) => handleChange({
                                day,
                                month: normalizeInputValue(e.target.value),
                                year
                            }),
                            onBlur: (e) => {
                                if (dayTouched && yearTouched) {
                                    onBlur();
                                }
                                setMonthTouched(true);
                            },
                            disabled: disabled
                        },
                        React.createElement("option", {
                            value: ""
                        }, i18n.months),
                        Info.months('long', {
                            locale: locale
                        }).map((name, idx) => (React.createElement("option", {
                            key: idx + 1,
                            label: name,
                            value: idx + 1
                        }, name)))))),
            React.createElement("div", {
                    className: "col-xs-4"
                },
                React.createElement(Label, null,
                    labelControls === 'inline' && React.createElement(GreyLabel, null, i18n.year),
                    React.createElement("input", {
                        className: "form-control",
                        "data-testid": "dateSelectorYear",
                        type: "number",
                        name: name,
                        max: maxYear,
                        min: minYear,
                        placeholder: labelControls === 'placeholder' ? i18n.year : '',
                        value: dispYear,
                        onChange: (e) => {
                            if (e.target.value.length > 4)
                                return false;
                            handleChange({
                                day,
                                month,
                                year: normalizeInputValue(e.target.value)
                            });
                        },
                        onBlur: (e) => {
                            if (dayTouched && monthTouched) {
                                onBlur();
                            }
                            setYearTouched(true);
                        },
                        onWheel: (e) => e.currentTarget.blur(),
                        disabled: disabled,
                        dir: "ltr"
                    }))))));
};
const GreyLabel = styled.span `
  color: #595959de;
`;
const Label = styled.label `
  display: block;
`;
const i18nDefault = {
    day: 'Day',
    months: 'Choose month',
    month: 'Month',
    year: 'Year',
};