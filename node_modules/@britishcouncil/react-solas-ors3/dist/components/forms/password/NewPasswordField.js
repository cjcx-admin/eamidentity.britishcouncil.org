import React, {
    useState,
    useMemo
} from 'react';
import styled from '@emotion/styled';
import {
    Row
} from '@britishcouncil/react-solas';
import {
    TextInput,
    estimatePasswordCompliance
} from '@britishcouncil/react-forms';
import {
    BsFillEyeFill,
    BsFillEyeSlashFill
} from 'react-icons/bs';
import {
    PasswordRequirements
} from './PasswordRequirements';
import {
    Field,
    getFieldProps
} from '../Field';
const i18nDefault = {
    showPassword: 'Show Password',
};
export const NewPasswordField = ({
    i18n = i18nDefault,
    passwordRequirementsI18n,
    inputDir = undefined,
    hideReqs = false,
    ...props
}) => {
    const [fieldProps, {
        name,
        value,
        onChange,
        onBlur,
        id
    }] = getFieldProps(props);
    const [showPassword, setShowPassword] = useState(false);
    const [showReqs, setShowReqs] = useState(false);
    const pswComplexity = useMemo(() => estimatePasswordCompliance(value), [value]);
    return (React.createElement(PswField, null,
        React.createElement(Field, { ...fieldProps,
                showColon: props.showColon,
                id: id
            },
            React.createElement(Row, null,
                React.createElement("div", {
                        className: "col-xs-12 col-md-8"
                    },
                    React.createElement("div", {
                            className: "margin-bottom-10 form-group"
                        },
                        React.createElement(StyledPsw, null,
                            React.createElement(TextInput, {
                                className: "form-control",
                                type: showPassword ? 'text' : 'password',
                                name: name,
                                value: value,
                                dir: inputDir,
                                autoComplete: "off",
                                onChange: onChange ? ? ((val) => {}),
                                onFocus: () => setShowReqs(true),
                                onBlur: () => {
                                    setShowReqs(false);
                                    onBlur && onBlur();
                                },
                                "aria-haspopup": "true",
                                id: id
                            }),
                            React.createElement("button", {
                                type: "button",
                                title: i18n.showPassword,
                                className: "hidden-md hidden-lg",
                                onClick: () => setShowPassword((prevValue) => !prevValue)
                            }, showPassword ? React.createElement(BsFillEyeSlashFill, null) : React.createElement(BsFillEyeFill, null)),
                            showReqs && !hideReqs ? (React.createElement(PasswordRequirements, {
                                pswStrength: pswComplexity,
                                i18n: passwordRequirementsI18n
                            })) : null))),
                React.createElement("div", {
                        className: "visible-md visible-lg col-md-4"
                    },
                    React.createElement("div", {
                            className: "checkbox-inline"
                        },
                        React.createElement(StyledShowPswLabel, null,
                            React.createElement("input", {
                                type: "checkbox",
                                checked: showPassword,
                                onChange: () => setShowPassword((prevValue) => !prevValue)
                            }),
                            i18n.showPassword)))))));
};
const StyledShowPswLabel = styled.label `
  &&& {
    color: #333;
  }
`;
const PswField = styled.div `
  margin-bottom: 20px;

  .help-block {
    font-style: normal;
  }

  .form-group {
    margin-bottom: 0;
  }

  .has-success {
    color: #3c763d;
  }
`;
const StyledPsw = styled.div `
  position: relative;

  > button {
    border: 0;
    position: absolute;
    right: 1px;
    top: 1px;
    height: 42px;
    width: 42px;
    background: none no-repeat 50%;
    outline: none;
    padding: 3px;

    > svg {
      transition: fill 0.2s ease-in-out;
      width: 1.25em;
      height: 1.25em;
      margin-top: 5px;
    }

    &:hover > svg {
      fill: #222;
    }
  }
`;