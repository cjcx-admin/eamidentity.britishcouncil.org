import React from 'react';
import styled from '@emotion/styled';
import cn from 'classnames';
export const LoadingCard = ({
    title,
    className,
    children,
    type = 'gray',
}) => {
    return (React.createElement(StyledAlert, {
            className: cn(className, type)
        },
        React.createElement("div", {
                className: "icon"
            },
            React.createElement(BcAnimation, null,
                React.createElement("div", {
                    className: "cube1 cube"
                }),
                React.createElement("div", {
                    className: "cube2 cube"
                }),
                React.createElement("div", {
                    className: "cube4 cube"
                }),
                React.createElement("div", {
                    className: "cube3 cube"
                }))),
        React.createElement("div", {
                className: "contents"
            },
            React.createElement("h2", null, title || 'Loading'),
            children)));
};
const BcAnimation = styled.div `
  width: 60px;
  height: 60px;
  position: relative;

  .cube {
    float: left;
    width: 50%;
    height: 50%;
    position: relative;
    transform: scale(1);
  }
  .cube:before {
    content: '';
    position: absolute;
    top: -1px;
    left: -1px;
    width: 100%;
    height: 100%;
    border-radius: 20px;
    animation: foldCube 2.4s infinite linear both;
    transform-origin: 100% 100%;
  }
  .cube2 {
    transform: scale(1) rotateZ(90deg);
  }
  .cube3 {
    transform: scale(1) rotateZ(180deg);
  }
  .cube4 {
    transform: scale(1) rotateZ(270deg);
  }
  .cube2:before {
    animation-delay: 0.3s;
  }
  .cube3:before {
    animation-delay: 0.6s;
  }
  .cube4:before {
    animation-delay: 0.9s;
  }
  @-webkit-keyframes foldCube {
    0%,
    10% {
      transform: perspective(140px) rotateX(-180deg);
      opacity: 0;
    }
    25%,
    75% {
      transform: perspective(140px) rotateX(0deg);
      opacity: 1;
    }
    90%,
    100% {
      transform: perspective(140px) rotateY(180deg);
      opacity: 0;
    }
  }
  @keyframes foldCube {
    0%,
    10% {
      transform: perspective(140px) rotateX(-180deg);
      opacity: 0;
    }
    25%,
    75% {
      transform: perspective(140px) rotateX(0deg);
      opacity: 1;
    }
    90%,
    100% {
      transform: perspective(140px) rotateY(180deg);
      opacity: 0;
    }
  }
`;
const StyledAlert = styled.div `
  display: flex;
  border-radius: 0 50px;
  padding: 32px 35px;
  margin: 0 auto;

  @media (min-width: 850px) {
    max-width: 632px;
  }
  @media (max-width: 849px) {
    padding: 24px;
    margin: 24px;
  }

  .contents {
    flex: 1 1 auto;
    z-index: 10;
  }

  .icon {
    flex: 0 0 50px;
    margin: 5px 25px 0 0;
    max-width: 60px;
    max-height: 60px;

    [dir='rtl'] & {
      margin: 5px 0 0 25px;
    }
  }

  h2 {
    font-size: 26px;
    margin-bottom: 14px;
  }

  p {
    margin-bottom: 20px;
    &:last-child {
      margin-bottom: 0;
    }
  }

  &.gray {
    background-color: rgba(216, 216, 216, 0.5);
    animation: shimmer 3s infinite linear both;
    background-image: linear-gradient(
      to right,
      rgba(0, 0, 0, 0.08) 0,
      rgba(0, 0, 0, 0.15) 15%,
      rgba(0, 0, 0, 0.08) 30%
    );
    background-size: 1200px 100%;

    .cube:before {
      background-color: #fff;
    }
  }

  &.white {
    background-color: #fff;

    .cube:before {
      background-color: #23085a;
    }
  }

  @media (max-width: 849px) {
    flex-direction: column;
    padding: 26px 18px;
    border-bottom-left-radius: 0;

    h2 {
      font-size: 28px;
      margin-bottom: 16px;
    }
    p {
      margin-bottom: 12px;
    }
  }

  @-webkit-keyframes shimmer {
    0% {
      background-position: -1200px 0;
    }

    100% {
      background-position: 1200px 0;
    }
  }

  @keyframes shimmer {
    0% {
      background-position: -1200px 0;
    }

    100% {
      background-position: 1200px 0;
    }
  }
`;