import React, {
    useCallback,
    useEffect,
    useState
} from 'react';
import DayPicker from 'react-day-picker';
import {
    DateTime
} from 'luxon';
import {
    max,
    min
} from 'lodash-es';
import {
    SelectionSummary
} from './SelectionSummary';
import {
    CalendarWrapper
} from './CalendarWrapper';
export const BcCalendar = ({
    dateRange,
    availableDates,
    onChange,
    onClear,
    showSelectionSummary = false,
}) => {
    const lastDate = max(availableDates);
    const firstDate = min(availableDates);
    const disabledDays = {
        before: firstDate,
        after: lastDate
    };
    const [fromDate, setFromDate] = useState();
    const [toDate, setToDate] = useState();
    useEffect(() => {
        const selFrom = dateRange ? DateTime.fromISO(dateRange[0]).toJSDate() : undefined;
        const selTo = dateRange ? DateTime.fromISO(dateRange[1]).toJSDate() : undefined;
        if ((selFrom && firstDate && firstDate > selFrom) || (selTo && lastDate && lastDate < selTo)) {
            setFromDate(undefined);
            setToDate(undefined);
            onChange(undefined);
        } else {
            setFromDate(selFrom);
            setToDate(selTo);
        }
    }, [lastDate, firstDate, dateRange, setFromDate, setToDate, onChange]);
    const modifiers = {
        available: availableDates,
        start: fromDate,
        end: toDate,
    };
    const handleDayClick = (day) => {
        if (fromDate && toDate && day >= fromDate && day <= toDate) {
            setToDate(undefined);
            setFromDate(undefined);
            onChange(undefined);
            return;
        }
        // Resets time part to midnight. For some strange reason react-day-picker assumes midday for clicked days
        day.setHours(0, 0, 0, 0);
        if (!fromDate) {
            setFromDate(day);
        } else {
            if (day < fromDate) {
                setFromDate(day);
                setToDate(fromDate);
                onChange([day, fromDate]);
            } else {
                setToDate(day);
                onChange([fromDate, day]);
            }
        }
    };
    const clearSelection = useCallback(() => {
        setFromDate(undefined);
        setToDate(undefined);
        onClear && onClear();
    }, [onClear]);
    return (React.createElement(React.Fragment, null,
        showSelectionSummary ? (React.createElement(SelectionSummary, {
            fromDate: fromDate,
            toDate: toDate,
            onClear: clearSelection
        })) : null,
        React.createElement(CalendarWrapper, null,
            React.createElement(DayPicker, {
                className: "Selectable",
                numberOfMonths: 2,
                firstDayOfWeek: 1,
                pagedNavigation: true,
                disabledDays: disabledDays,
                fromMonth: firstDate,
                toMonth: lastDate,
                month: fromDate ? ? firstDate,
                modifiers: modifiers,
                modifiersStyles: modifiersStyles,
                selectedDays: [fromDate, {
                    from: fromDate,
                    to: toDate
                }],
                onDayClick: handleDayClick
            }))));
};
const modifiersStyles = {
    available: {
        color: '#000',
        fontWeight: 'bold',
        textDecoration: 'underline',
    },
};