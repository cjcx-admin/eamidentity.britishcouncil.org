import React from 'react';
import styled from '@emotion/styled';
import cn from 'classnames';
import {
    MdCancel,
    MdWarning,
    MdCheckCircle,
    MdInfo
} from 'react-icons/md';
const StyledAlert = styled.div `
  padding: 50px;
  display: flex;
  border-radius: 50px 0;

  &.bc-alert-extended {
    padding: 32px 163px;
    margin: 0 auto;

    @media (min-width: 850px) {
      max-width: 958px; /* 632px + 2 * 163px */
    }
    @media (max-width: 849px) {
      padding: 24px;
      margin: 24px;
    }
  }

  &.bc-alert-small {
    padding: 20px;
  }

  .contents {
    flex: 1 1 auto;
    z-index: 10;
  }

  .icon {
    flex: 0 0 35px;
    margin: 5px 25px 0 0;
    width: 35px;
    height: 35px;

    [dir='rtl'] & {
      margin: 5px 0 0 25px;
    }

    svg {
      width: 100%;
      height: 100%;
    }
  }

  h2 {
    font-size: 35px;
    margin-bottom: 24px;
  }

  p {
    margin-bottom: 20px;
    &:last-child {
      margin-bottom: 0;
    }
  }

  &.intent-danger {
    background-color: rgba(255, 186, 184, 0.5);
    .icon > svg {
      fill: #ea0034;
    }
  }

  &.intent-warning {
    background-color: rgba(255, 228, 158, 0.5);
    .icon > svg {
      fill: #e4b800;
    }
  }

  &.intent-success {
    background-color: rgba(174, 255, 138, 0.5);

    .icon > svg {
      fill: #22c000;
      [dir='rtl'] & {
        transform: scaleX(1) !important;
      }
    }
  }

  &.intent-info {
    background-color: rgb(0 92 185 / 20%);

    .icon > svg {
      fill: #005cb9;
    }
  }

  @media (max-width: 849px) {
    flex-direction: column;
    padding: 26px 18px;

    h2 {
      font-size: 28px;
      margin-bottom: 16px;
    }
    p {
      margin-bottom: 12px;
    }
  }
`;
export const BcAlert = ({
    children,
    className,
    type = 'warning',
    size,
    title,
    extended,
    hideIcon = false,
    dangerouslySetInnerHTML,
    ...props
}) => (React.createElement(StyledAlert, {
    "aria-live": "polite",
    ...props,
    className: cn(className, {
        'bc-alert-small': size === 'sm',
        'bc-alert-extended': extended
    }, 'bc-alert intent-' + type)
}, !hideIcon && (React.createElement("div", {
        className: "icon"
    },
    type === 'danger' && React.createElement(MdCancel, {
        "aria-hidden": "true"
    }),
    type === 'warning' && React.createElement(MdWarning, {
        "aria-hidden": "true"
    }),
    type === 'success' && React.createElement(MdCheckCircle, {
        "aria-hidden": "true"
    }),
    type === 'info' && React.createElement(MdInfo, {
        "aria-hidden": "true"
    }))), !dangerouslySetInnerHTML ? (React.createElement("div", {
        className: "contents",
        "data-testid": "alert"
    },
    title ? React.createElement("h2", null, title) : null,
    children)) : (React.createElement("div", {
    className: "contents",
    "data-testid": "alert",
    dangerouslySetInnerHTML: dangerouslySetInnerHTML
}))));