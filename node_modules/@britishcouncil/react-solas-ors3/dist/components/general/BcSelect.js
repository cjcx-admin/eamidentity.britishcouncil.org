import React from 'react';
import SelectSearch, {
    fuzzySearch,
} from 'react-select-search';
import {
    FaSort
} from 'react-icons/fa';
import {
    SearchIcon
} from '../icons';
import {
    SvgLoader
} from '../loaders';
import {
    BcSelectWrapper
} from './BcSelectWrapper';
export function renderVal(valueProps, className, loading = false, usingGetOptions = false) {
    return (React.createElement(React.Fragment, null,
        React.createElement("input", { ...valueProps,
            className: className
        }),
        usingGetOptions ? (React.createElement("div", {
                className: "select-search__indicator using-getoptions"
            },
            React.createElement(SvgLoader, null),
            React.createElement(FaSort, {
                size: "24px",
                className: "sort"
            }))) : (React.createElement("div", {
            className: "select-search__indicator"
        }, loading ? React.createElement(SvgLoader, null) : React.createElement(FaSort, {
            size: "24px"
        }))),
        React.createElement("div", {
                className: "select-search__icon"
            },
            React.createElement(SearchIcon, null))));
}
const i18nDefault = {
    loading: 'Loading',
};
export const BcSelect = ({
    i18n = i18nDefault,
    ...props
}) => {
    return (React.createElement(BcSelectWrapper, {
            forceLtr: props.forceLtr,
            dir: props.forceLtr ? 'ltr' : undefined
        },
        React.createElement(SelectSearch, {
            disabled: props.isLoading,
            search: true,
            ...props,
            filterOptions: props.filterOptions ? ? fuzzySearch,
            placeholder: props.isLoading ? i18n.loading : props.placeholder,
            renderValue: (valueProps, snapshot, className) => renderVal(valueProps, className, props.isLoading, !!props.getOptions),
            onChange: (selectedValue, selectedOption, optionSnapshot) => props.onChange(selectedValue, selectedOption, optionSnapshot)
        })));
};