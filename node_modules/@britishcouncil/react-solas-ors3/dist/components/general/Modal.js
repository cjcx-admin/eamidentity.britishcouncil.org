import React, {
    useEffect,
    useState
} from 'react';
import AriaModal from '@justfixnyc/react-aria-modal';
import {
    LoadingContainer,
    Button
} from '@britishcouncil/react-solas';
import styled from '@emotion/styled';
import {
    SuiPanel
} from '../layout';
import {
    LinkButton
} from './LinkButton';
const i18nDefault = {
    hide: 'Hide',
};
export const Modal = ({
    show,
    title,
    onExit,
    isLoading,
    onShow,
    onHide,
    subtitle,
    confirmLabel = 'Confirm',
    onConfirm,
    modalProps,
    footer,
    intent = 'default',
    dir = 'ltr',
    showHideLink = true,
    i18n = i18nDefault,
    dataTestId,
    children,
}) => {
    const [prevState, setPrevState] = useState(null);
    useEffect(() => {
        if (prevState && !show && !!onHide) {
            onHide();
        }
        setPrevState(show);
    }, [show, onHide, prevState]);
    return show ? (React.createElement(AriaModal, {
            titleText: title,
            onExit: () => onExit(),
            onEnter: onShow,
            underlayStyle: {
                padding: '2em 0',
            },
            focusDialog: true,
            verticallyCenter: true,
            ...modalProps
        },
        React.createElement(FlexSuiPanel, {
                intent: intent,
                "data-testid": dataTestId,
                dir: dir
            },
            React.createElement(SuiPanel.Header, null,
                React.createElement(HeaderContainer, null,
                    React.createElement(HeaderText, null, title),
                    showHideLink && (React.createElement(LinkButton, {
                        onClick: onExit,
                        "data-testid": "close"
                    }, i18n.hide)))),
            React.createElement(StyledSuiPanelBody, null,
                React.createElement(StyledLoadingContainer, {
                        loading: isLoading
                    },
                    subtitle && React.createElement(Subtitle, null, subtitle),
                    children)),
            footer && (React.createElement(Footer, null,
                React.createElement(CtasContainer, null, footer))),
            onConfirm && !footer && (React.createElement(Footer, null,
                React.createElement(CtasContainer, null,
                    React.createElement(Button, {
                        intent: "primary",
                        disabled: isLoading,
                        onClick: onConfirm,
                        "data-testid": "submit"
                    }, confirmLabel))))))) : null;
};
const FlexSuiPanel = styled(SuiPanel)
`
  margin-bottom: 0;
  border-radius: 5px;
  display: flex;
  flex-direction: column;
`;
const StyledSuiPanelBody = styled(SuiPanel.Body)
`
  flex: 1 1 auto;
  overflow-y: visible;
  [dir='rtl'] & {
    text-align: right;
  }
`;
const StyledLoadingContainer = styled(LoadingContainer)
`
  &:before {
    left: 0;
    right: 0;
  }
`;
const Footer = styled(SuiPanel.Header)
`
  border-radius: 0 0 5px 5px !important;
`;
const HeaderContainer = styled.div `
  display: flex;
  justify-content: space-between;
  align-content: center;
`;
const HeaderText = styled.span `
  justify-self: left;
  align-self: center;
  font-size: 1.5em;
  color: #23085a;
  font-weight: bold;
`;
const Subtitle = styled.p `
  color: #23085a;
  font-weight: bold;
`;
const CtasContainer = styled.div `
  display: flex;
  flex-direction: column;
  justify-content: stretch;
  .btn {
    margin-top: 0.25em;
  }
`;